#!/bin/bash
#
# Launcher script for ndi-display systemd service
# Properly handles environment variables with spaces in stream names
# Checks ENABLED parameter to determine if display should run
# Manages console state based on configuration
#

DISPLAY_ID=$1
CONFIG_FILE="/etc/media-bridge/display-${DISPLAY_ID}.conf"
VTCON_PATH="/sys/class/vtconsole/vtcon${DISPLAY_ID}/bind"

if [ -z "$DISPLAY_ID" ]; then
    echo "Error: Display ID not provided"
    exit 1
fi

# No config = no NDI display, ensure console is enabled (exit cleanly)
if [ ! -f "$CONFIG_FILE" ]; then
    echo "No configuration for display $DISPLAY_ID, skipping"
    # Make sure console is enabled on this display
    if [ -f "$VTCON_PATH" ] && [ "$(cat $VTCON_PATH)" = "0" ]; then
        echo "Re-enabling console on display $DISPLAY_ID"
        /usr/local/bin/ndi-display-console-manager enable ${DISPLAY_ID} 2>&1 || true
    fi
    exit 0
fi

# Source the configuration file to get STREAM_NAME and ENABLED
source "$CONFIG_FILE"

# Check if explicitly disabled - ensure console is enabled
if [ "${ENABLED}" = "false" ]; then
    echo "Display $DISPLAY_ID is disabled in configuration"
    # Make sure console is enabled on this display
    if [ -f "$VTCON_PATH" ] && [ "$(cat $VTCON_PATH)" = "0" ]; then
        echo "Re-enabling console on display $DISPLAY_ID"
        /usr/local/bin/ndi-display-console-manager enable ${DISPLAY_ID} 2>&1 || true
    fi
    exit 0
fi

# No stream configured = no NDI display, ensure console is enabled (exit cleanly)
if [ -z "$STREAM_NAME" ]; then
    echo "No stream name configured for display $DISPLAY_ID, skipping"
    # Make sure console is enabled on this display
    if [ -f "$VTCON_PATH" ] && [ "$(cat $VTCON_PATH)" = "0" ]; then
        echo "Re-enabling console on display $DISPLAY_ID"
        /usr/local/bin/ndi-display-console-manager enable ${DISPLAY_ID} 2>&1 || true
    fi
    exit 0
fi

# We have a valid config and it's enabled - disable console if needed
if [ -f "$VTCON_PATH" ] && [ "$(cat $VTCON_PATH)" = "1" ]; then
    echo "Console is active on display ${DISPLAY_ID}, disabling it for NDI..."
    /usr/local/bin/ndi-display-console-manager disable ${DISPLAY_ID} 2>&1 || true
fi

# Set up PipeWire environment (user mode with socket bind mount)
export XDG_RUNTIME_DIR="/run/pipewire"
export PIPEWIRE_RUNTIME_DIR="/run/pipewire"
export PULSE_RUNTIME_PATH="/run/pipewire/pulse"
mkdir -p $XDG_RUNTIME_DIR

# Wait for user PipeWire if it's starting
if ! systemctl is-active --quiet user@999.service; then
    echo "Warning: Media Bridge user session not running"
    echo "Audio output may not work. Start with: systemctl start user@999.service"
else
    # Intelligently select HDMI audio output based on display ID
    sleep 1  # Give PipeWire time to enumerate devices
    
    # Try to find the HDMI audio sink that corresponds to this display
    # Display IDs map to HDMI-A-N+1 (display 0 = HDMI-A-1, display 1 = HDMI-A-2, etc.)
    HDMI_NUM=$((DISPLAY_ID + 1))
    
    # First try to find a sink specifically for this HDMI port
    HDMI_SINK=$(pactl list sinks 2>/dev/null | grep -B2 "HDMI.*${HDMI_NUM}" | grep "Name:" | awk '{print $2}')
    
    # If not found, try any HDMI sink (fallback for single HDMI audio device systems)
    if [ -z "$HDMI_SINK" ]; then
        HDMI_SINK=$(pactl list sinks short 2>/dev/null | grep -E "hdmi|HDMI" | awk '{print $2}' | head -1)
    fi
    
    if [ -n "$HDMI_SINK" ]; then
        echo "Setting audio output for display $DISPLAY_ID to: $HDMI_SINK"
        pactl set-default-sink "$HDMI_SINK" 2>/dev/null || true
    else
        echo "Warning: No HDMI audio sink found for display $DISPLAY_ID"
    fi
fi

# Detect which connector this display uses for better audio routing
CONNECTOR=$(/opt/media-bridge/ndi-display displays 2>/dev/null | grep "Display $DISPLAY_ID:" | awk '{print $2}' | head -1)
if [ -n "$CONNECTOR" ] && [ -x /usr/local/bin/ndi-display-audio-setup ]; then
    /usr/local/bin/ndi-display-audio-setup $DISPLAY_ID "$CONNECTOR" || true
fi

# Launch ndi-display with proper quoting to handle spaces
echo "Starting NDI display $DISPLAY_ID with stream: $STREAM_NAME"
exec /opt/media-bridge/ndi-display "$STREAM_NAME" $DISPLAY_ID