#!/bin/bash
# VDO.Ninja Intercom running as dedicated user (like desktop Ubuntu)

set +e

# Configuration
FULL_HOSTNAME=$(hostname)
HOSTNAME=${FULL_HOSTNAME#ndi-bridge-}
ROOM="${VDO_ROOM:-nl_interkom}"
DISPLAY_NUM=99
INTERCOM_USER="intercom"
INTERCOM_HOME="/home/intercom"
CHROME_PROFILE="$INTERCOM_HOME/.config/google-chrome"

echo "=== VDO.Ninja Intercom Starting (User Mode) ==="
echo "Device: $HOSTNAME"
echo "Room: $ROOM"

# Cleanup function
cleanup() {
    echo "Cleaning up..."
    # Kill Chrome and audio processes for intercom user
    pkill -u $INTERCOM_USER -f chrome 2>/dev/null || true
    pkill -u $INTERCOM_USER pipewire 2>/dev/null || true
    pkill -u $INTERCOM_USER wireplumber 2>/dev/null || true
    pkill -f x11vnc 2>/dev/null || true
    pkill -f Xvfb 2>/dev/null || true
    rm -f /tmp/.X${DISPLAY_NUM}-lock 2>/dev/null || true
}

trap cleanup INT TERM
cleanup

# Create intercom user if needed
if ! id "$INTERCOM_USER" &>/dev/null; then
    echo "Creating intercom user..."
    useradd -m -s /bin/bash $INTERCOM_USER
    # Add to audio group for device access
    usermod -a -G audio,video $INTERCOM_USER
fi

# Get user ID
INTERCOM_UID=$(id -u $INTERCOM_USER)

# Create XDG runtime directory for the user
mkdir -p /run/user/$INTERCOM_UID
chown $INTERCOM_USER:$INTERCOM_USER /run/user/$INTERCOM_UID
chmod 700 /run/user/$INTERCOM_UID

# Ensure user owns their home directory
chown -R $INTERCOM_USER:$INTERCOM_USER $INTERCOM_HOME

# Start Xvfb
echo "Starting virtual display..."
Xvfb :$DISPLAY_NUM -screen 0 1280x720x24 -ac > /dev/null 2>&1 &
XVFB_PID=$!
sleep 2

# Start VNC
echo "Starting VNC server on port 5999..."
x11vnc -display :$DISPLAY_NUM -nopw -forever -shared -rfbport 5999 > /var/log/x11vnc.log 2>&1 &
VNC_PID=$!
sleep 1

# Create user script for Chrome and PipeWire
cat > $INTERCOM_HOME/run-intercom.sh << 'EOF'
#!/bin/bash

# Set environment
export DISPLAY=:99
export XDG_RUNTIME_DIR="/run/user/$(id -u)"
export HOME="/home/intercom"

# Runtime directory already created by parent script

# Kill any existing PipeWire/PulseAudio
pkill -f pipewire 2>/dev/null || true
pkill -f wireplumber 2>/dev/null || true
pkill -f pipewire-pulse 2>/dev/null || true

# Start PipeWire components as user
echo "Starting PipeWire audio system..."
pipewire &
PW_PID=$!
sleep 2

wireplumber &
WP_PID=$!
sleep 2

pipewire-pulse &
PP_PID=$!
sleep 2

# Wait for PipeWire to be ready
for i in {1..10}; do
    if pactl info >/dev/null 2>&1; then
        echo "PipeWire ready"
        break
    fi
    sleep 1
done

# List available devices
echo "Available audio devices:"
pactl list sinks short
pactl list sources short | grep -v monitor

# Find USB audio devices
USB_SINK=$(pactl list sinks short | grep -i "usb.*audio\|csctek" | awk '{print $2}' | head -1)
USB_SOURCE=$(pactl list sources short | grep -i "usb.*audio\|csctek" | grep -v monitor | awk '{print $2}' | head -1)

if [ -n "$USB_SINK" ] && [ -n "$USB_SOURCE" ]; then
    echo "Setting USB audio as default:"
    echo "  Output: $USB_SINK"
    echo "  Input: $USB_SOURCE"
    
    # Set as defaults
    pactl set-default-sink "$USB_SINK"
    pactl set-default-source "$USB_SOURCE"
    
    # Verify
    sleep 1
    echo "Defaults set to:"
    pactl info | grep -E "Default (Sink|Source):"
else
    echo "WARNING: USB audio not found!"
fi

# VDO.Ninja URL
ROOM="${1:-nl_interkom}"
HOSTNAME="${2:-$(hostname | sed 's/ndi-bridge-//')}"
URL="https://vdo.ninja/?room=${ROOM}&push=${HOSTNAME}&label=${HOSTNAME}&miconly&autostart&sl&st&mobile&fb"

echo "Starting Chrome..."
echo "URL: $URL"

# Create Chrome preferences for mic permission
mkdir -p $HOME/.config/google-chrome/Default
cat > $HOME/.config/google-chrome/Default/Preferences << 'PREFS'
{
  "profile": {
    "content_settings": {
      "exceptions": {
        "media_stream_mic": {
          "https://vdo.ninja:443,*": {
            "last_modified": "13400766142668061",
            "setting": 1
          }
        }
      }
    }
  },
  "browser": {
    "check_default_browser": false
  }
}
PREFS

# Start Chrome
google-chrome \
    --no-first-run \
    --no-default-browser-check \
    --disable-gpu \
    --disable-dev-shm-usage \
    --autoplay-policy=no-user-gesture-required \
    --user-data-dir=$HOME/.config/google-chrome \
    --new-window \
    "$URL" &

CHROME_PID=$!

# Keep running while Chrome is alive
while kill -0 $CHROME_PID 2>/dev/null; do
    sleep 10
done

# Cleanup
kill $PW_PID $WP_PID $PP_PID 2>/dev/null
EOF

chmod +x $INTERCOM_HOME/run-intercom.sh
chown $INTERCOM_USER:$INTERCOM_USER $INTERCOM_HOME/run-intercom.sh

# VDO.Ninja parameters
URL_ROOM="$ROOM"
URL_HOSTNAME="$HOSTNAME"

echo ""
echo "=== VNC Remote Access ==="
echo "Connect to VNC: $(hostname -I | awk '{print $1}'):5999"
echo ""

# Run as intercom user
echo "Starting Chrome and PipeWire as user '$INTERCOM_USER'..."
sudo -u $INTERCOM_USER $INTERCOM_HOME/run-intercom.sh "$URL_ROOM" "$URL_HOSTNAME"

# Cleanup when done
cleanup