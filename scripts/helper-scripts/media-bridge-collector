#!/bin/bash
# Media Bridge Status Collector
# Runs as a service to collect metrics for the welcome screen

# Create runtime directory
mkdir -p /var/run/media-bridge

# Track service start time for stabilization period
SERVICE_START_FILE="/var/run/media-bridge/capture_start_time"

# Main collection loop
while true; do
    # 1. Get current FPS from last metrics entry (only if recent)
    # Try journal first, fall back to log file if journal not available
    METRICS_LINE=$(journalctl -u ndi-capture -n 200 --no-pager 2>/dev/null | grep "METRICS|" | tail -1)
    if [ -z "$METRICS_LINE" ] && [ -f /var/log/media-bridge/ndi-capture.log ]; then
        METRICS_LINE=$(tail -200 /var/log/media-bridge/ndi-capture.log | grep "METRICS|" | tail -1)
    fi
    if [ -n "$METRICS_LINE" ]; then
        # Extract timestamp and check if recent (within 5 seconds)
        # Handle both formats:
        # Journal: Sep 10 21:46:21 media-bridge run.sh[156423]: [2025-09-10 21:46:21.499] METRICS|...
        # Log file: [2025-09-10 20:02:39.577] METRICS|...
        if echo "$METRICS_LINE" | grep -q '^\['; then
            # Log file format - starts with [timestamp]
            METRICS_TIME=$(echo "$METRICS_LINE" | sed 's/^\[\([^]]*\)\].*/\1/')
        else
            # Journal format - timestamp is after colon in brackets
            METRICS_TIME=$(echo "$METRICS_LINE" | sed 's/.*\[\([^]]*\)\].*/\1/')
        fi
        
        if [ -n "$METRICS_TIME" ]; then
            METRICS_EPOCH=$(date -d "$METRICS_TIME" +%s 2>/dev/null || echo "0")
            NOW_EPOCH=$(date +%s)
            AGE=$((NOW_EPOCH - METRICS_EPOCH))
            
            # Only use metrics if less than 5 seconds old
            if [ "$AGE" -lt 5 ]; then
                FPS=$(echo "$METRICS_LINE" | sed -n 's/.*FPS:\([0-9.]*\).*/\1/p')
                FRAMES=$(echo "$METRICS_LINE" | sed -n 's/.*FRAMES:\([0-9]*\).*/\1/p')
                DROPPED=$(echo "$METRICS_LINE" | sed -n 's/.*DROPPED:\([0-9]*\).*/\1/p')
                LATENCY=$(echo "$METRICS_LINE" | sed -n 's/.*LATENCY:\([0-9.]*\).*/\1/p')
                
                echo "$FPS" > /var/run/media-bridge/fps_current
                echo "$FRAMES" > /var/run/media-bridge/frames_total
                
                # If we have a baseline (post-stabilization), subtract it from dropped frames
                if [ -f /var/run/media-bridge/dropped_baseline ]; then
                    BASELINE=$(cat /var/run/media-bridge/dropped_baseline)
                    ADJUSTED_DROPPED=$((DROPPED - BASELINE))
                    # Don't show negative values
                    if [ "$ADJUSTED_DROPPED" -lt 0 ]; then
                        ADJUSTED_DROPPED=0
                    fi
                    echo "$ADJUSTED_DROPPED" > /var/run/media-bridge/frames_dropped
                else
                    echo "$DROPPED" > /var/run/media-bridge/frames_dropped
                fi
                
                [ -n "$LATENCY" ] && echo "$LATENCY" > /var/run/media-bridge/latency_ms
            else
                # Metrics are stale - clear them
                echo "0.00" > /var/run/media-bridge/fps_current
                echo "0" > /var/run/media-bridge/frames_total
                echo "0" > /var/run/media-bridge/frames_dropped
                echo "N/A" > /var/run/media-bridge/latency_ms
            fi
        fi
    fi
    
    # 2. Get 10-minute FPS history and calculate average
    # Try journal first, fall back to log file if journal not available
    FPS_HISTORY=$(journalctl -u ndi-capture --since "10 minutes ago" --no-pager 2>/dev/null | grep "METRICS|" | sed -n 's/.*FPS:\([0-9.]*\).*/\1/p')
    if [ -z "$FPS_HISTORY" ] && [ -f /var/log/media-bridge/ndi-capture.log ]; then
        FPS_HISTORY=$(tail -600 /var/log/media-bridge/ndi-capture.log | grep "METRICS|" | sed -n 's/.*FPS:\([0-9.]*\).*/\1/p')
    fi
    if [ -n "$FPS_HISTORY" ]; then
        # Calculate average
        AVG_FPS=$(echo "$FPS_HISTORY" | awk '{sum+=$1; count++} END {if(count>0) printf "%.2f", sum/count; else print "0"}')
        echo "$AVG_FPS" > /var/run/media-bridge/fps_10min_avg
        
        # Find min/max
        MIN_FPS=$(echo "$FPS_HISTORY" | sort -n | head -1)
        MAX_FPS=$(echo "$FPS_HISTORY" | sort -n | tail -1)
        echo "$MIN_FPS" > /var/run/media-bridge/fps_10min_min
        echo "$MAX_FPS" > /var/run/media-bridge/fps_10min_max
        
        # Count issues (FPS < 55)
        ISSUES=$(echo "$FPS_HISTORY" | awk '$1 < 55' | wc -l)
        echo "$ISSUES" > /var/run/media-bridge/fps_issues
    fi
    
    # 3. Monitor network TX rate on br0
    if [ -f /sys/class/net/br0/statistics/tx_bytes ]; then
        TX_BYTES_1=$(cat /sys/class/net/br0/statistics/tx_bytes)
        sleep 1
        TX_BYTES_2=$(cat /sys/class/net/br0/statistics/tx_bytes)
        
        # Calculate Mbps
        BYTES_DIFF=$((TX_BYTES_2 - TX_BYTES_1))
        MBPS=$(echo "scale=1; $BYTES_DIFF * 8 / 1000000" | bc 2>/dev/null || echo "0")
        echo "$MBPS" > /var/run/media-bridge/network_mbps
    else
        echo "0" > /var/run/media-bridge/network_mbps
    fi
    
    # 4. Check capture state and device status
    # First check if the configured device exists
    DEVICE=$(cat /etc/media-bridge/config 2>/dev/null | grep DEVICE | cut -d'"' -f2 || echo "/dev/video0")
    
    if [ ! -e "$DEVICE" ]; then
        # Device doesn't exist
        echo "NO_DEVICE" > /var/run/media-bridge/capture_state
    elif systemctl is-active --quiet ndi-capture; then
        # Check if this is a fresh start (service just became active)
        if [ ! -f "$SERVICE_START_FILE" ]; then
            # Record the start time
            date +%s > "$SERVICE_START_FILE"
        fi
        
        # Check if we're in stabilization period (first 30 seconds)
        if [ -f "$SERVICE_START_FILE" ]; then
            START_TIME=$(cat "$SERVICE_START_FILE")
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ "$ELAPSED" -lt 30 ]; then
                # Still stabilizing (30 seconds)
                echo "STABILIZING" > /var/run/media-bridge/capture_state
                echo "$ELAPSED" > /var/run/media-bridge/stabilizing_seconds
                # Skip the rest of the checks during stabilization
                sleep 1
                continue
            elif [ "$ELAPSED" -ge 30 ] && [ ! -f /var/run/media-bridge/stabilization_complete ]; then
                # Stabilization just completed - save current dropped count as baseline
                echo "CAPTURING" > /var/run/media-bridge/capture_state
                rm -f /var/run/media-bridge/stabilizing_seconds
                
                # Get current dropped frames to use as baseline
                CURRENT_DROPPED=$(journalctl -u ndi-capture -n 200 --no-pager 2>/dev/null | grep "METRICS|" | tail -1 | sed -n 's/.*DROPPED:\([0-9]*\).*/\1/p')
                if [ -n "$CURRENT_DROPPED" ]; then
                    echo "$CURRENT_DROPPED" > /var/run/media-bridge/dropped_baseline
                else
                    echo "0" > /var/run/media-bridge/dropped_baseline
                fi
                
                # Reset the displayed counter to 0
                echo "0" > /var/run/media-bridge/frames_dropped
                
                # Mark that we've reset so we don't do it again
                touch /var/run/media-bridge/stabilization_complete
            fi
        fi
        # Service is running, check if actually capturing (has recent metrics)
        LAST_METRIC_TIME=$(journalctl -u ndi-capture -n 10 --no-pager 2>/dev/null | grep "METRICS|" | tail -1 | cut -d' ' -f1-3)
        if [ -n "$LAST_METRIC_TIME" ]; then
            # Check if metric is recent (within last 5 seconds)
            LAST_EPOCH=$(date -d "$LAST_METRIC_TIME" +%s 2>/dev/null || echo "0")
            NOW_EPOCH=$(date +%s)
            DIFF=$((NOW_EPOCH - LAST_EPOCH))
            
            if [ "$DIFF" -lt 5 ]; then
                echo "CAPTURING" > /var/run/media-bridge/capture_state
            else
                # Check for recent errors
                RECENT_ERROR=$(journalctl -u ndi-capture -n 5 --no-pager 2>/dev/null | grep -E "ERROR|Failed to open device")
                if [ -n "$RECENT_ERROR" ]; then
                    echo "ERROR" > /var/run/media-bridge/capture_state
                else
                    echo "IDLE" > /var/run/media-bridge/capture_state
                fi
            fi
        else
            echo "STARTING" > /var/run/media-bridge/capture_state
        fi
    else
        echo "STOPPED" > /var/run/media-bridge/capture_state
        # Clear the start time and stabilization markers when service stops
        rm -f "$SERVICE_START_FILE"
        rm -f /var/run/media-bridge/stabilizing_seconds
        rm -f /var/run/media-bridge/stabilization_complete
        rm -f /var/run/media-bridge/dropped_baseline
    fi
    
    # 5. Get NDI stream name from config
    if [ -f /etc/media-bridge/config ]; then
        source /etc/media-bridge/config
        echo "$NDI_NAME" > /var/run/media-bridge/stream_name
    fi
    
    # Wait before next collection (total loop ~2 seconds)
    sleep 1
done