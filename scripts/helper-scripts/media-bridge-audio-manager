#!/bin/bash
# Media Bridge Audio Manager - Simplified with PipeWire native tools
# Creates virtual devices and links them to hardware using pw-link

set -e

# PipeWire environment - use mediabridge user's runtime
# Connect to mediabridge's PipeWire instance
export XDG_RUNTIME_DIR="/run/user/999"

# Function to wait for PipeWire
wait_for_pipewire() {
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if pw-cli info Core >/dev/null 2>&1; then
            echo "PipeWire is ready"
            return 0
        fi
        echo "Waiting for PipeWire... (attempt $((attempt+1))/$max_attempts)"
        sleep 1
        attempt=$((attempt+1))
    done
    
    echo "ERROR: PipeWire not ready after $max_attempts seconds"
    return 1
}

# Function to create virtual devices using pw-cli
create_virtual_devices() {
    echo "Creating virtual audio devices..."
    
    # Create virtual speaker (sink) for Chrome output
    echo "Creating virtual speaker..."
    pw-cli create-node adapter '{
        factory.name="support.null-audio-sink"
        node.name="intercom-speaker"
        node.description="Intercom Speaker"
        media.class="Audio/Sink"
        audio.position="[FL FR]"
        audio.channels=2
        audio.rate=48000
    }' || echo "Virtual speaker may already exist"
    
    # Create virtual microphone sink for processing
    echo "Creating virtual microphone sink..."
    pw-cli create-node adapter '{
        factory.name="support.null-audio-sink"  
        node.name="intercom-mic-sink"
        node.description="Hidden Microphone Sink"
        media.class="Audio/Sink"
        audio.position="[MONO]"
        audio.channels=1
        audio.rate=48000
    }' || echo "Virtual mic sink may already exist"
    
    # Create virtual microphone source from the sink's monitor
    echo "Creating virtual microphone source..."
    pw-cli create-node adapter '{
        factory.name="support.null-audio-sink"
        node.name="intercom-microphone"
        node.description="Intercom Microphone"
        media.class="Audio/Source/Virtual"
        audio.position="[MONO]"
        audio.channels=1
        audio.rate=48000
        stream.monitor=true
        target.object="intercom-mic-sink"
    }' || echo "Virtual microphone may already exist"
    
    echo "Virtual devices created"
}

# Function to link virtual devices to hardware using pw-link
setup_audio_routing() {
    echo "Setting up audio routing with pw-link..."
    
    # Wait for devices to be available
    sleep 2
    
    # Find device IDs
    local speaker_id=$(pw-cli ls Node | grep -B2 'node.name = "intercom-speaker"' | grep "id:" | awk '{print $2}')
    local mic_sink_id=$(pw-cli ls Node | grep -B2 'node.name = "intercom-mic-sink"' | grep "id:" | awk '{print $2}')
    local usb_output_id=$(pw-cli ls Node | grep -B2 'CSCTEK.*Analog Stereo' | grep -B2 'Audio/Sink' | grep "id:" | awk '{print $2}' | head -1)
    local usb_input_id=$(pw-cli ls Node | grep -B2 'CSCTEK.*Mono' | grep -B2 'Audio/Source' | grep "id:" | awk '{print $2}' | head -1)
    
    if [ -z "$speaker_id" ] || [ -z "$mic_sink_id" ]; then
        echo "ERROR: Virtual devices not found"
        return 1
    fi
    
    # Link virtual speaker to USB output (if USB device exists)
    if [ -n "$usb_output_id" ]; then
        echo "Linking virtual speaker to USB output..."
        # Get port names for linking
        local speaker_out=$(pw-cli enum-params "$speaker_id" Port | grep -o '"name":"[^"]*_output"' | cut -d'"' -f4 | head -1)
        local usb_in=$(pw-cli enum-params "$usb_output_id" Port | grep -o '"name":"[^"]*_input"' | cut -d'"' -f4 | head -1)
        
        if [ -n "$speaker_out" ] && [ -n "$usb_in" ]; then
            pw-link "${speaker_id}:${speaker_out}" "${usb_output_id}:${usb_in}" 2>/dev/null || \
            pw-link "intercom-speaker:monitor_FL" "$usb_output_id:playback_FL" 2>/dev/null || \
            echo "Link may already exist or use different port names"
        fi
        
        echo "Virtual speaker linked to USB output"
    else
        echo "WARNING: USB output device not found"
    fi
    
    # Link USB input to virtual microphone sink (if USB device exists)
    if [ -n "$usb_input_id" ]; then
        echo "Linking USB input to virtual microphone..."
        # Get port names for linking
        local usb_out=$(pw-cli enum-params "$usb_input_id" Port | grep -o '"name":"[^"]*_output"' | cut -d'"' -f4 | head -1)
        local mic_in=$(pw-cli enum-params "$mic_sink_id" Port | grep -o '"name":"[^"]*_input"' | cut -d'"' -f4 | head -1)
        
        if [ -n "$usb_out" ] && [ -n "$mic_in" ]; then
            pw-link "${usb_input_id}:${usb_out}" "${mic_sink_id}:${mic_in}" 2>/dev/null || \
            pw-link "$usb_input_id:capture_MONO" "intercom-mic-sink:playback_MONO" 2>/dev/null || \
            echo "Link may already exist or use different port names"
        fi
        
        echo "USB input linked to virtual microphone"
    else
        echo "WARNING: USB input device not found"
    fi
    
    echo "Audio routing configured"
}

# Function to verify setup
verify_setup() {
    echo "Verifying audio setup..."
    
    # List all nodes
    echo "Audio nodes:"
    pw-cli ls Node | grep -E "node.name|node.description" | grep -E "intercom|CSCTEK|hdmi"
    
    # List all links
    echo ""
    echo "Audio links:"
    pw-link -l | grep -E "intercom|CSCTEK" || echo "No links found yet"
    
    echo ""
    echo "Setup verification complete"
}

# Function to cleanup (for 'cleanup' command)
cleanup_audio_devices() {
    echo "Cleaning up audio devices..."
    
    # Find and destroy virtual nodes
    local nodes=$(pw-cli ls Node | grep -B2 -E "intercom-speaker|intercom-microphone|intercom-mic-sink" | grep "id:" | awk '{print $2}')
    
    for node_id in $nodes; do
        echo "Removing node $node_id"
        pw-cli destroy "$node_id" 2>/dev/null || true
    done
    
    echo "Cleanup complete"
}

# Main execution
case "${1:-setup}" in
    setup)
        echo "=== Media Bridge Audio Manager Setup ==="
        wait_for_pipewire
        create_virtual_devices
        setup_audio_routing
        verify_setup
        echo "Audio setup complete"
        ;;
        
    cleanup)
        echo "=== Media Bridge Audio Manager Cleanup ==="
        cleanup_audio_devices
        ;;
        
    verify)
        verify_setup
        ;;
        
    *)
        echo "Usage: $0 {setup|cleanup|verify}"
        echo "  setup   - Create virtual devices and setup routing"
        echo "  cleanup - Remove virtual devices"
        echo "  verify  - Check current setup"
        exit 1
        ;;
esac