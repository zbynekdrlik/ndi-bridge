#!/bin/bash
# Update NDI Capture binary from USB or network

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Helper functions
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    error "This script must be run as root"
fi

echo "NDI Bridge Update Tool"
echo "====================="
echo ""
echo "Update source:"
echo "1) From mounted USB device"
echo "2) From network URL"
echo ""
read -p "Select option (1-2): " option

case $option in
    1)
        # Update from USB
        echo ""
        echo "Available USB devices:"
        lsblk -o NAME,SIZE,TYPE,MOUNTPOINT | grep -E "disk|part"
        echo ""
        read -p "Enter path to ndi-capture binary (e.g., /mnt/usb/ndi-capture): " BINARY_PATH
        
        if [ ! -f "$BINARY_PATH" ]; then
            error "Binary not found at $BINARY_PATH"
        fi
        ;;
    2)
        # Update from network
        echo ""
        read -p "Enter URL to ndi-capture binary: " BINARY_URL
        
        log "Downloading binary..."
        BINARY_PATH="/tmp/ndi-capture-new"
        if ! wget -O "$BINARY_PATH" "$BINARY_URL"; then
            error "Failed to download binary"
        fi
        ;;
    *)
        error "Invalid option"
        ;;
esac

# Verify it's a valid binary
if ! file "$BINARY_PATH" | grep -q "ELF.*executable"; then
    error "File is not a valid executable binary"
fi

# Check version
log "Checking new binary version..."
NEW_VERSION=$("$BINARY_PATH" --version 2>&1 | head -1 | awk '{for(i=1;i<=NF;i++) if($i ~ /[0-9]+\.[0-9]+\.[0-9]+/) print $i}' || echo "Unknown")
CURRENT_VERSION=$(/opt/ndi-bridge/ndi-capture --version 2>&1 | head -1 | awk '{for(i=1;i<=NF;i++) if($i ~ /[0-9]+\.[0-9]+\.[0-9]+/) print $i}' || echo "Unknown")

echo ""
echo "Current version: $CURRENT_VERSION"
echo "New version:     $NEW_VERSION"
echo ""
read -p "Continue with update? (y/N): " confirm

if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    log "Update cancelled"
    exit 0
fi

# Remount root as read-write
mount -o remount,rw / 2>/dev/null || true

# Stop service
log "Stopping NDI Capture service..."
systemctl stop ndi-capture

# Backup current binary
log "Backing up current binary..."
cp /opt/ndi-bridge/ndi-capture /opt/ndi-bridge/ndi-capture.backup

# Copy new binary
log "Installing new binary..."
cp "$BINARY_PATH" /opt/ndi-bridge/ndi-capture
chmod +x /opt/ndi-bridge/ndi-capture

# Start service
log "Starting NDI Capture service..."
systemctl start ndi-capture

# Check if service started successfully
sleep 2
if systemctl is-active --quiet ndi-capture; then
    log "Update successful! NDI Capture is running with version $NEW_VERSION"
else
    warn "Service failed to start, rolling back..."
    cp /opt/ndi-bridge/ndi-capture.backup /opt/ndi-bridge/ndi-capture
    systemctl start ndi-capture
    error "Update failed, rolled back to previous version"
fi

# Cleanup
rm -f "$BINARY_PATH" 2>/dev/null || true