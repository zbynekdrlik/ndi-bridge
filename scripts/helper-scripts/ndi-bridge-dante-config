#!/bin/bash
# Configure Dante audio bridge settings

CONFIG_FILE="/etc/ndi-bridge/dante.conf"
NEED_RESTART=false

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

show_menu() {
    clear
    echo "================================"
    echo "   Dante Audio Configuration    "
    echo "================================"
    echo
    echo "1) Set Device Name"
    echo "2) Configure Channels (2-64)"
    echo "3) Set Sample Rate"
    echo "4) Enable/Disable Services"
    echo "5) Enable/Disable USB Bridge"
    echo "6) Test Audio"
    echo "7) Show Current Config"
    echo "8) Restart Services"
    echo "9) Exit"
    echo
    echo -n "Select option: "
}

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        echo -e "${RED}Configuration file not found!${NC}"
        echo "Creating default configuration..."
        mkdir -p /etc/ndi-bridge
        cat > "$CONFIG_FILE" << 'EOF'
# Dante Audio Bridge Configuration
DANTE_INTERFACE=br0
DANTE_CHANNELS=2
DANTE_SAMPLE_RATE=48000
DANTE_DEVICE_NAME=ndi-bridge
DANTE_ENABLED=true
DANTE_MODE=bidirectional
EOF
    fi
}

save_config() {
    cat > "$CONFIG_FILE" << EOF
# Dante Audio Bridge Configuration
DANTE_INTERFACE=${DANTE_INTERFACE:-br0}
DANTE_CHANNELS=${DANTE_CHANNELS:-2}
DANTE_SAMPLE_RATE=${DANTE_SAMPLE_RATE:-48000}
DANTE_DEVICE_NAME=${DANTE_DEVICE_NAME:-ndi-bridge}
DANTE_ENABLED=${DANTE_ENABLED:-true}
DANTE_MODE=${DANTE_MODE:-bidirectional}
EOF
    echo -e "${GREEN}Configuration saved${NC}"
    NEED_RESTART=true
}

set_device_name() {
    echo -n "Enter Dante device name (current: ${DANTE_DEVICE_NAME:-ndi-bridge}): "
    read new_name
    if [ -n "$new_name" ]; then
        DANTE_DEVICE_NAME="$new_name"
        save_config
        # Update environment for services
        sed -i "s/INFERNO_NAME=.*/INFERNO_NAME=$new_name/" /etc/systemd/system/inferno-alsa.service 2>/dev/null
        systemctl daemon-reload
    fi
}

set_channels() {
    echo "Current channels: ${DANTE_CHANNELS:-2}"
    echo -n "Enter number of channels (2-64): "
    read new_channels
    if [[ "$new_channels" =~ ^[0-9]+$ ]] && [ "$new_channels" -ge 2 ] && [ "$new_channels" -le 64 ]; then
        DANTE_CHANNELS="$new_channels"
        save_config
    else
        echo -e "${RED}Invalid channel count!${NC}"
        sleep 2
    fi
}

set_sample_rate() {
    echo "Select sample rate:"
    echo "1) 44100 Hz"
    echo "2) 48000 Hz"
    echo -n "Choice (current: ${DANTE_SAMPLE_RATE:-48000}): "
    read choice
    case $choice in
        1) DANTE_SAMPLE_RATE=44100; save_config ;;
        2) DANTE_SAMPLE_RATE=48000; save_config ;;
        *) echo -e "${RED}Invalid choice${NC}"; sleep 2 ;;
    esac
}

toggle_services() {
    echo "Dante Services:"
    echo "1) Enable all Dante services"
    echo "2) Disable all Dante services"
    echo "3) Back to menu"
    echo -n "Choice: "
    read choice
    
    case $choice in
        1)
            systemctl enable statime.service inferno-alsa.service 2>/dev/null
            systemctl start statime.service inferno-alsa.service 2>/dev/null
            echo -e "${GREEN}Dante services enabled${NC}"
            sleep 2
            ;;
        2)
            systemctl stop statime.service inferno-alsa.service usb-dante-bridge.service 2>/dev/null
            systemctl disable statime.service inferno-alsa.service 2>/dev/null
            echo -e "${YELLOW}Dante services disabled${NC}"
            sleep 2
            ;;
    esac
}

toggle_usb_bridge() {
    USB_STATUS=$(systemctl is-active usb-dante-bridge.service)
    
    if [ "$USB_STATUS" = "active" ]; then
        echo "USB to Dante bridge is currently ACTIVE"
        echo -n "Disable it? (y/n): "
        read choice
        if [ "$choice" = "y" ]; then
            systemctl stop usb-dante-bridge.service
            systemctl disable usb-dante-bridge.service
            echo -e "${YELLOW}USB bridge disabled${NC}"
        fi
    else
        echo "USB to Dante bridge is currently INACTIVE"
        # Check for USB audio devices
        USB_COUNT=$(aplay -l | grep -E "USB Audio|Arturia" | wc -l)
        if [ "$USB_COUNT" -gt 0 ]; then
            echo "Found $USB_COUNT USB audio device(s)"
            echo -n "Enable USB to Dante bridge? (y/n): "
            read choice
            if [ "$choice" = "y" ]; then
                systemctl enable usb-dante-bridge.service
                systemctl start usb-dante-bridge.service
                echo -e "${GREEN}USB bridge enabled${NC}"
            fi
        else
            echo -e "${RED}No USB audio devices found${NC}"
        fi
    fi
    sleep 2
}

test_audio() {
    echo "Audio Test Options:"
    echo "1) Generate test tone to Dante output"
    echo "2) List available audio devices"
    echo "3) Test USB audio device"
    echo "4) Cancel"
    echo -n "Choice: "
    read choice
    
    case $choice in
        1)
            echo "Generating 1kHz test tone for 3 seconds..."
            INFERNO_NAME=${DANTE_DEVICE_NAME:-ndi-bridge} INFERNO_INTERFACE=br0 \
                speaker-test -D dante -c 2 -t sine -f 1000 -l 1 2>/dev/null || \
                echo -e "${RED}Failed to generate test tone${NC}"
            ;;
        2)
            echo "Available ALSA devices:"
            aplay -l
            ;;
        3)
            USB_CARD=$(aplay -l | grep -E "USB Audio|Arturia" | head -1 | sed 's/card \([0-9]\).*/\1/')
            if [ -n "$USB_CARD" ]; then
                echo "Testing USB audio device (card $USB_CARD)..."
                speaker-test -D plughw:$USB_CARD,0 -c 2 -t sine -f 1000 -l 1 2>/dev/null
            else
                echo -e "${RED}No USB audio device found${NC}"
            fi
            ;;
    esac
    
    echo
    echo "Press Enter to continue..."
    read
}

show_config() {
    echo "Current Dante Configuration:"
    echo "============================"
    echo "Device Name: ${DANTE_DEVICE_NAME:-ndi-bridge}"
    echo "Interface: ${DANTE_INTERFACE:-br0}"
    echo "Channels: ${DANTE_CHANNELS:-2}"
    echo "Sample Rate: ${DANTE_SAMPLE_RATE:-48000} Hz"
    echo "Mode: ${DANTE_MODE:-bidirectional}"
    echo
    echo "Service Status:"
    echo "---------------"
    echo -n "Statime PTP: "
    systemctl is-active statime.service
    echo -n "Inferno ALSA: "
    systemctl is-active inferno-alsa.service
    echo -n "USB Bridge: "
    systemctl is-active usb-dante-bridge.service
    echo
    echo "Press Enter to continue..."
    read
}

restart_services() {
    echo -n "Restarting Dante services..."
    systemctl restart statime.service 2>/dev/null
    sleep 2
    systemctl restart inferno-alsa.service 2>/dev/null
    sleep 1
    systemctl restart usb-dante-bridge.service 2>/dev/null
    
    if systemctl is-active inferno-alsa.service >/dev/null 2>&1; then
        echo -e " ${GREEN}OK${NC}"
    else
        echo -e " ${RED}FAILED${NC}"
        echo "Check logs with: journalctl -u inferno-alsa.service"
    fi
    sleep 2
}

# Main loop
load_config

while true; do
    show_menu
    read choice
    
    case $choice in
        1) set_device_name ;;
        2) set_channels ;;
        3) set_sample_rate ;;
        4) toggle_services ;;
        5) toggle_usb_bridge ;;
        6) test_audio ;;
        7) show_config ;;
        8) restart_services ;;
        9) 
            if [ "$NEED_RESTART" = "true" ]; then
                echo -e "${YELLOW}Configuration changed. Restart services? (y/n)${NC}"
                read -n 1 restart
                echo
                if [ "$restart" = "y" ]; then
                    restart_services
                fi
            fi
            exit 0
            ;;
        *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
    esac
done