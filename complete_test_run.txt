============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.3.2, pluggy-1.6.0 -- /usr/bin/python3
cachedir: .pytest_cache
metadata: {'Python': '3.12.3', 'Platform': 'Linux-6.6.87.2-microsoft-standard-WSL2-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.2', 'pluggy': '1.6.0'}, 'Plugins': {'json-report': '1.5.0', 'rerunfailures': '14.0', 'testinfra': '10.1.0', 'html': '4.1.1', 'cov': '5.0.0', 'timeout': '2.3.1', 'xdist': '3.6.1', 'metadata': '3.1.1', 'clarity': '1.0.1'}}
rootdir: /mnt/c/Users/newlevel/Documents/GitHub/ndi-bridge/tests
configfile: pytest.ini
plugins: json-report-1.5.0, rerunfailures-14.0, testinfra-10.1.0, html-4.1.1, cov-5.0.0, timeout-2.3.1, xdist-3.6.1, metadata-3.1.1, clarity-1.0.1
timeout: 30.0s
timeout method: signal
timeout func_only: False
collecting ... collected 92 items

tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_usb_audio_device_present PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_csctek_usb_audio_detected PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_pipewire_sees_usb_audio PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_control_get_volumes PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_control_set_mic_volume PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_control_set_speaker_volume PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_control_mute_unmute_mic PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_monitor_control PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_monitor_latency PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_pipewire_quantum_adjustment PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_device_exclusive_access PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_pipewire_modules_loaded PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_levels_readable PASSED
tests/component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_device_reconnection_handling PASSED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_directory_exists PASSED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_save_command_exists PASSED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_save_and_load PASSED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_file_format PASSED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_persistence_across_restart FAILED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_default_values PASSED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_save_requires_writable_filesystem PASSED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_backup_functionality PASSED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_validation FAILED
tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_permissions PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_service_exists PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_service_enabled PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_service_running PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_service_configuration PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_launcher_script_exists PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_pipewire_script_exists PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_control_script_exists PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_config_script_exists PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_monitor_script_exists PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_helper_scripts_exist PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_status_command FAILED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_control_get_status FAILED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_service_restart PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_chrome_installed PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_pipewire_installed PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_wireplumber_installed PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_xvfb_installed PASSED
tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_x11vnc_installed PASSED
tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_complete_audio_workflow FAILED
tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_monitor_workflow FAILED
tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_configuration_persistence_workflow FAILED
tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_service_restart_recovery PASSED
tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_vnc_remote_access FAILED
tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_vdo_ninja_connection FAILED
tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_usb_audio_integration PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_script_exists PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_script_has_latency_configuration PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_enable_command PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_disable_command PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_status_command PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_quantum_adjustment PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_loopback_module_loaded PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_latency_calculation PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_audio_routing PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_cpu_usage_claim FAILED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_enable_disable_cycle FAILED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_volume_control SKIPPED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_survives_intercom_restart PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_requires_usb_audio PASSED
tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_pipewire_requirement PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_chrome_process_running PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_chrome_vdo_ninja_parameters PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_xvfb_process_running PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_x11vnc_process_running PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_pipewire_process_running PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_wireplumber_process_running PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_vnc_port_listening PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_display_environment_set PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_chrome_using_correct_display PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_chrome_profile_directory PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_chrome_restart_recovery PASSED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_process_resource_usage FAILED
tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_chrome_push_parameter_matches_hostname SKIPPED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_service_exists PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_nginx_intercom_config_exists PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_backend_files_exist FAILED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_frontend_files_exist SKIPPED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_interface_accessible PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_api_status_endpoint PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_api_mute_endpoint PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_api_volume_endpoint PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_websocket_endpoint_exists PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_interface_responsive_design PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_api_cors_headers PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_fastapi_running PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_static_files_served PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_security_headers PASSED
tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_api_authentication PASSED

=================================== FAILURES ===================================
__________ TestIntercomConfig.test_config_persistence_across_restart ___________
tests/component/intercom/test_intercom_config.py:113: in test_config_persistence_across_restart
    assert settings_after["input"]["volume"] == settings_before["input"]["volume"], "Input volume should persist"
E   AssertionError: Input volume should persist
E   assert == failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32m50[0m
E     [0m[31m100[0m
E     [0m
        host       = <testinfra.host.Host ssh://10.77.8.119>
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ndi-bridge-intercom-control status',
              _stdout=b'{\n  "output": {\n    "device": "",\n    "volume": '
                      b'50,\n    "muted": false\n  },\n  "input": {\n    "de'
                      b'vice": "",\n    "volume": 50,\n    "muted": false\n'
                      b'  }\n}\n',
              _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output'
                      b')\nERROR: CSCTEK USB Audio HID device not found (inpu'
                      b't)\n')
        self       = <test_intercom_config.TestIntercomConfig object at 0x7a3bc2204d70>
        settings_after = {'input': {'device': '', 'muted': False, 'volume': 50},
 'output': {'device': '', 'muted': False, 'volume': 50}}
        settings_before = {'input': {'device': 'alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback',
           'muted': True,
           'volume': 100},
 'output': {'device': 'alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo',
            'muted': False,
            'volume': 100}}
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n    "volume": 100,\n    "muted": false\n  },\n  "input": {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback",\n    "volume": 100,\n    "muted": true\n  }\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'systemctl restart ndi-bridge-intercom'", _stdout=b'', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "",\n    "volume": 50,\n    "muted": false\n  },\n  "input": {\n    "device": "",\n    "volume": 50,\n    "muted": false\n  }\n}\n', _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output)\nERROR: CSCTEK USB Audio HID device not found (input)\n')
__________________ TestIntercomConfig.test_config_validation ___________________
tests/component/intercom/test_intercom_config.py:169: in test_config_validation
    assert status["mic_volume"] <= 100, "Volume should be clamped to 100"
E   KeyError: 'mic_volume'
        host       = <testinfra.host.Host ssh://10.77.8.119>
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ndi-bridge-intercom-control status',
              _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTE'
                      b'K_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n'
                      b'    "volume": 100,\n    "muted": false\n  },\n  "input"'
                      b': {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_a'
                      b'nd_HID_A34004801402-00.mono-fallback",\n    "volume":'
                      b' 100,\n    "muted": true\n  }\n}\n',
              _stderr=b'')
        self       = <test_intercom_config.TestIntercomConfig object at 0x7a3bc2204c80>
        status     = {'input': {'device': 'alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback',
           'muted': True,
           'volume': 100},
 'output': {'device': 'alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo',
            'muted': False,
            'volume': 100}}
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set mic_volume 150 2>&1'", _stdout=b'Usage: /usr/local/bin/ndi-bridge-intercom-control {status|set-volume|mute|unmute|toggle} [args]\n\nCommands:\n  status                    - Show current audio status (JSON)\n  set-volume <out|in> <0-100> - Set volume percentage\n  mute <out|in|both>        - Mute audio\n  unmute <out|in|both>      - Unmute audio\n  toggle <out|in|both>      - Toggle mute state\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n    "volume": 100,\n    "muted": false\n  },\n  "input": {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback",\n    "volume": 100,\n    "muted": true\n  }\n}\n', _stderr=b'')
________________ TestIntercomCore.test_intercom_status_command _________________
tests/component/intercom/test_intercom_core.py:99: in test_intercom_status_command
    assert "ndi-bridge-intercom.service" in result.stdout or "Active:" in result.stdout
E   assert (in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mndi-bridge-intercom.service[0m
E     [0m[31mNDI Bridge Intercom Status[0m
E     [0m[31m==========================[0m
E     [0m
E     [0m[31mService: Running[0m
E     [0m[31mChrome: Active[0m
E     [0m[31mVNC: Available on port 5999[0m
E     [0m[31mAudio: PipeWire active[0m
E     [0m
E     [0m[31mRoom: nl_interkom[0m
E     [0m[31mDevice ID: ndi-bridge-cam1[0m
E     [0m
E     [0m[31mRecent logs:[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.376097:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.376803:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.377211:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.676841:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.677101:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m or in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mActive:[0m
E     [0m[31mNDI Bridge Intercom Status[0m
E     [0m[31m==========================[0m
E     [0m
E     [0m[31mService: Running[0m
E     [0m[31mChrome: Active[0m
E     [0m[31mVNC: Available on port 5999[0m
E     [0m[31mAudio: PipeWire active[0m
E     [0m
E     [0m[31mRoom: nl_interkom[0m
E     [0m[31mDevice ID: ndi-bridge-cam1[0m
E     [0m
E     [0m[31mRecent logs:[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.376097:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.376803:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.377211:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.676841:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
E     [0m[31m[522894:522925:0902/151724.677101:ERROR:dbus/bus.cc:408] Failed to connect to [0m
E     [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
E     [0m[31mtypes are "tcp" and on UNIX "unix")[0m
E     [0m)
        host       = <testinfra.host.Host ssh://10.77.8.119>
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ndi-bridge-intercom-status',
              _stdout=b'NDI Bridge Intercom Status\n========================='
                      b'=\n\nService: Running\nChrome: Active\nVNC: Availabl'
                      b'e on port 5999\nAudio: PipeWire active\n\nRoom: nl_inte'
                      b'rkom\nDevice ID: ndi-bridge-cam1\n\nRecent logs:\nSe'
                      b'p 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-la'
                      b'uncher[522900]: [522894:522925:0902/151724.376097:ER'
                      b'ROR:dbus/bus.cc:408] Failed to connect to the bus: C'
                      b'ould not parse server address: Unknown address type '
                      b'(examples of valid types are "tcp" and on UNIX "unix'
                      b'")\nSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-interc'
                      b'om-launcher[522900]: [522894:522925:0902/151724.3768'
                      b'03:ERROR:dbus/bus.cc:408] Failed to connect to the b'
                      b'us: Could not parse server address: Unknown address '
                      b'type (examples of valid types are "tcp" and on UNIX '
                      b'"unix")\nSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-i'
                      b'ntercom-launcher[522900]: [522894:522925:0902/151724'
                      b'.377211:ERROR:dbus/bus.cc:408] Failed to connect to '
                      b'the bus: Could not parse server address: Unknown add'
                      b'ress type (examples of valid types are "tcp" and on '
                      b'UNIX "unix")\nSep 02 15:17:24 ndi-bridge-cam1 ndi-bri'
                      b'dge-intercom-launcher[522900]: [522894:522925:0902/1'
                      b'51724.676841:ERROR:dbus/bus.cc:408] Failed to connec'
                      b't to the bus: Could not parse server address: Unknow'
                      b'n address type (examples of valid types are "tcp" an'
                      b'd on UNIX "unix")\nSep 02 15:17:24 ndi-bridge-cam1 nd'
                      b'i-bridge-intercom-launcher[522900]: [522894:522925:0'
                      b'902/151724.677101:ERROR:dbus/bus.cc:408] Failed to c'
                      b'onnect to the bus: Could not parse server address: U'
                      b'nknown address type (examples of valid types are "tc'
                      b'p" and on UNIX "unix")\n',
              _stderr=b'')
        self       = <test_intercom_core.TestIntercomCore object at 0x7a3bc2207020>
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b'ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 ndi-bridge-intercom-status', _stdout=b'NDI Bridge Intercom Status\n==========================\n\nService: Running\nChrome: Active\nVNC: Available on port 5999\nAudio: PipeWire active\n\nRoom: nl_interkom\nDevice ID: ndi-bridge-cam1\n\nRecent logs:\nSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [522894:522925:0902/151724.376097:ERROR:dbus/bus.cc:408] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are "tcp" and on UNIX "unix")\nSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [522894:522925:0902/151724.376803:ERROR:dbus/bus.cc:408] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are "tcp" and on UNIX "unix")\nSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [522894:522925:0902/151724.377211:ERROR:dbus/bus.cc:408] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are "tcp" and on UNIX "unix")\nSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [522894:522925:0902/151724.676841:ERROR:dbus/bus.cc:408] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are "tcp" and on UNIX "unix")\nSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [522894:522925:0902/151724.677101:ERROR:dbus/bus.cc:408] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are "tcp" and on UNIX "unix")\n', _stderr=b'')
______________ TestIntercomCore.test_intercom_control_get_status _______________
tests/component/intercom/test_intercom_core.py:109: in test_intercom_control_get_status
    assert "mic_volume" in status, "Should have mic_volume"
E   AssertionError: Should have mic_volume
E   assert in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mmic_volume[0m
E     [0m[31m{[0m
E     [0m[31m    'input': {[0m
E     [0m[31m        'device': [0m
E     [0m[31m'alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback',[0m
E     [0m[31m        'muted': True,[0m
E     [0m[31m        'volume': 100,[0m
E     [0m[31m    },[0m
E     [0m[31m    'output': {[0m
E     [0m[31m        'device': [0m
E     [0m[31m'alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo',[0m
E     [0m[31m        'muted': False,[0m
E     [0m[31m        'volume': 100,[0m
E     [0m[31m    },[0m
E     [0m[31m}[0m
E     [0m
        host       = <testinfra.host.Host ssh://10.77.8.119>
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ndi-bridge-intercom-control status',
              _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTE'
                      b'K_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n'
                      b'    "volume": 100,\n    "muted": false\n  },\n  "input"'
                      b': {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_a'
                      b'nd_HID_A34004801402-00.mono-fallback",\n    "volume":'
                      b' 100,\n    "muted": true\n  }\n}\n',
              _stderr=b'')
        self       = <test_intercom_core.TestIntercomCore object at 0x7a3bc2205b50>
        status     = {'input': {'device': 'alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback',
           'muted': True,
           'volume': 100},
 'output': {'device': 'alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo',
            'muted': False,
            'volume': 100}}
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n    "volume": 100,\n    "muted": false\n  },\n  "input": {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback",\n    "volume": 100,\n    "muted": true\n  }\n}\n', _stderr=b'')
_____________ TestIntercomIntegration.test_complete_audio_workflow _____________
tests/component/intercom/test_intercom_integration.py:39: in test_complete_audio_workflow
    assert current["input"]["volume"] == volume
E   assert == failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32m50[0m
E     [0m[31m40[0m
E     [0m
        current    = {'input': {'device': '', 'muted': False, 'volume': 50},
 'output': {'device': '', 'muted': False, 'volume': 50}}
        host       = <testinfra.host.Host ssh://10.77.8.119>
        initial_state = {'input': {'device': '', 'muted': False, 'volume': 50},
 'output': {'device': '', 'muted': False, 'volume': 50}}
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ndi-bridge-intercom-control status',
              _stdout=b'{\n  "output": {\n    "device": "",\n    "volume": '
                      b'50,\n    "muted": false\n  },\n  "input": {\n    "de'
                      b'vice": "",\n    "volume": 50,\n    "muted": false\n'
                      b'  }\n}\n',
              _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output'
                      b')\nERROR: CSCTEK USB Audio HID device not found (inpu'
                      b't)\n')
        self       = <test_intercom_integration.TestIntercomIntegration object at 0x7a3bc2207c80>
        test_volumes = [40, 60, 80]
        volume     = 40
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "",\n    "volume": 50,\n    "muted": false\n  },\n  "input": {\n    "device": "",\n    "volume": 50,\n    "muted": false\n  }\n}\n', _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output)\nERROR: CSCTEK USB Audio HID device not found (input)\n')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set-volume input 40'", _stdout=b'Volume set to 40%\n', _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output)\nERROR: CSCTEK USB Audio HID device not found (input)\n')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set-volume output 40'", _stdout=b'Volume set to 40%\n', _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output)\nERROR: CSCTEK USB Audio HID device not found (input)\n')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "",\n    "volume": 50,\n    "muted": false\n  },\n  "input": {\n    "device": "",\n    "volume": 50,\n    "muted": false\n  }\n}\n', _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output)\nERROR: CSCTEK USB Audio HID device not found (input)\n')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set-volume input 50'", _stdout=b'Volume set to 50%\n', _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output)\nERROR: CSCTEK USB Audio HID device not found (input)\n')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set-volume output 50'", _stdout=b'Volume set to 50%\n', _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output)\nERROR: CSCTEK USB Audio HID device not found (input)\n')
________________ TestIntercomIntegration.test_monitor_workflow _________________
tests/component/intercom/test_intercom_integration.py:104: in test_monitor_workflow
    assert "disabled" in result.stdout.lower()
E   assert in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mdisabled[0m
E     [0m[31m{[0m
E     [0m[31m    "enabled": false,[0m
E     [0m[31m    "volume": 0,[0m
E     [0m[31m    "module_id": "",[0m
E     [0m[31m    "latency_ms": ""[0m
E     [0m[31m}[0m
E     [0m
        current    = {'input': {'device': 'alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback',
           'muted': True,
           'volume': 100},
 'output': {'device': 'alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo',
            'muted': False,
            'volume': 100}}
        host       = <testinfra.host.Host ssh://10.77.8.119>
        initial_state = {'input': {'device': '', 'muted': False, 'volume': 50},
 'output': {'device': '', 'muted': False, 'volume': 50}}
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ndi-bridge-intercom-monitor status',
              _stdout=b'{\n    "enabled": false,\n    "volume": 0,\n    "module'
                      b'_id": "",\n    "latency_ms": ""\n}\n',
              _stderr=b'')
        self       = <test_intercom_integration.TestIntercomIntegration object at 0x7a3bc2207e60>
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "",\n    "volume": 50,\n    "muted": false\n  },\n  "input": {\n    "device": "",\n    "volume": 50,\n    "muted": false\n  }\n}\n', _stderr=b'ERROR: CSCTEK USB Audio HID device not found (output)\nERROR: CSCTEK USB Audio HID device not found (input)\n')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor enable'", _stdout=b'\x1b[0;32mMonitoring enabled\x1b[0m (module: 536870913)\n\x1b[0;32mMonitor volume set to 50%\x1b[0m\nTarget latency: .66ms @ 48kHz (Ultra-low latency mode)\n', _stderr=b'\x1b[0;31mError: CSCTEK USB Audio HID device not found\x1b[0m\n')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n    "volume": 100,\n    "muted": false\n  },\n  "input": {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback",\n    "volume": 100,\n    "muted": true\n  }\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor status'", _stdout=b'{\n    "enabled": false,\n    "volume": 0,\n    "module_id": "536870913",\n    "latency_ms": ""\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n    "volume": 100,\n    "muted": false\n  },\n  "input": {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback",\n    "volume": 100,\n    "muted": true\n  }\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor disable'", _stdout=b'\x1b[0;32mMonitoring disabled\x1b[0m\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n    "volume": 100,\n    "muted": false\n  },\n  "input": {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback",\n    "volume": 100,\n    "muted": true\n  }\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor status'", _stdout=b'{\n    "enabled": false,\n    "volume": 0,\n    "module_id": "",\n    "latency_ms": ""\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor disable'", _stdout=b'\x1b[1;33mMonitoring not enabled\x1b[0m\n', _stderr=b'')
_______ TestIntercomIntegration.test_configuration_persistence_workflow ________
tests/component/intercom/test_intercom_integration.py:155: in test_configuration_persistence_workflow
    assert current["input"]["volume"] == test_config["mic_volume"]
E   assert == failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32m100[0m
E     [0m[31m55[0m
E     [0m
        current    = {'input': {'device': 'alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback',
           'muted': True,
           'volume': 100},
 'output': {'device': 'alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo',
            'muted': False,
            'volume': 100}}
        host       = <testinfra.host.Host ssh://10.77.8.119>
        initial_state = {'input': {'device': 'alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback',
           'muted': True,
           'volume': 100},
 'output': {'device': 'alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo',
            'muted': False,
            'volume': 100}}
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ndi-bridge-intercom-control status',
              _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTE'
                      b'K_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n'
                      b'    "volume": 100,\n    "muted": false\n  },\n  "input"'
                      b': {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_a'
                      b'nd_HID_A34004801402-00.mono-fallback",\n    "volume":'
                      b' 100,\n    "muted": true\n  }\n}\n',
              _stderr=b'')
        self       = <test_intercom_integration.TestIntercomIntegration object at 0x7a3bc2254080>
        test_config = {'mic_volume': 55, 'speaker_volume': 65}
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n    "volume": 100,\n    "muted": false\n  },\n  "input": {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback",\n    "volume": 100,\n    "muted": true\n  }\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b'ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 ndi-bridge-rw', _stdout=b"Filesystem mounted read-write. Use 'ndi-bridge-ro' to return to read-only.\n", _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set mic_volume 55'", _stdout=b'Usage: /usr/local/bin/ndi-bridge-intercom-control {status|set-volume|mute|unmute|toggle} [args]\n\nCommands:\n  status                    - Show current audio status (JSON)\n  set-volume <out|in> <0-100> - Set volume percentage\n  mute <out|in|both>        - Mute audio\n  unmute <out|in|both>      - Unmute audio\n  toggle <out|in|both>      - Toggle mute state\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set speaker_volume 65'", _stdout=b'Usage: /usr/local/bin/ndi-bridge-intercom-control {status|set-volume|mute|unmute|toggle} [args]\n\nCommands:\n  status                    - Show current audio status (JSON)\n  set-volume <out|in> <0-100> - Set volume percentage\n  mute <out|in|both>        - Mute audio\n  unmute <out|in|both>      - Unmute audio\n  toggle <out|in|both>      - Toggle mute state\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-config save'", _stdout=b'Configuration saved to /etc/ndi-bridge/intercom.conf\n  Output Volume: 100%\n  Input Volume: 100%\n  Output Muted: false\n  Input Muted: true\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set mic_volume 90'", _stdout=b'Usage: /usr/local/bin/ndi-bridge-intercom-control {status|set-volume|mute|unmute|toggle} [args]\n\nCommands:\n  status                    - Show current audio status (JSON)\n  set-volume <out|in> <0-100> - Set volume percentage\n  mute <out|in|both>        - Mute audio\n  unmute <out|in|both>      - Unmute audio\n  toggle <out|in|both>      - Toggle mute state\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set speaker_volume 95'", _stdout=b'Usage: /usr/local/bin/ndi-bridge-intercom-control {status|set-volume|mute|unmute|toggle} [args]\n\nCommands:\n  status                    - Show current audio status (JSON)\n  set-volume <out|in> <0-100> - Set volume percentage\n  mute <out|in|both>        - Mute audio\n  unmute <out|in|both>      - Unmute audio\n  toggle <out|in|both>      - Toggle mute state\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor disable'", _stdout=b'\x1b[1;33mMonitoring not enabled\x1b[0m\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-config load'", _stdout=b'Loading configuration from /etc/ndi-bridge/intercom.conf\n  Output volume set to 100%\n  Input volume set to 100%\n  Output unmuted\n  Input muted\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control status'", _stdout=b'{\n  "output": {\n    "device": "alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo",\n    "volume": 100,\n    "muted": false\n  },\n  "input": {\n    "device": "alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback",\n    "volume": 100,\n    "muted": true\n  }\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set-volume input 100'", _stdout=b'Volume set to 100%\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-control set-volume output 100'", _stdout=b'Volume set to 100%\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor disable'", _stdout=b'\x1b[1;33mMonitoring not enabled\x1b[0m\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-config save'", _stdout=b'Configuration saved to /etc/ndi-bridge/intercom.conf\n  Output Volume: 100%\n  Input Volume: 100%\n  Output Muted: false\n  Input Muted: true\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b'ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 ndi-bridge-ro', _stdout=b'Filesystem mounted read-only.\n', _stderr=b'')
________________ TestIntercomIntegration.test_vnc_remote_access ________________
tests/component/intercom/test_intercom_integration.py:222: in test_vnc_remote_access
    assert "succeeded" in result.stdout.lower() or "connected" in result.stdout.lower()
E   assert (in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32msucceeded[0m
E     [0m[31mbash: line 1: nc: command not found[0m
E     [0m or in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mconnected[0m
E     [0m[31mbash: line 1: nc: command not found[0m
E     [0m)
        host       = <testinfra.host.Host ssh://10.77.8.119>
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=127,
              command=b'nc -zv localhost 5999 2>&1',
              _stdout=b'bash: line 1: nc: command not found\n',
              _stderr=b'')
        self       = <test_intercom_integration.TestIntercomIntegration object at 0x7a3bc2254440>
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ss -tlnp | grep :5999'", _stdout=b'LISTEN 0      32           0.0.0.0:5999      0.0.0.0:*    users:(("x11vnc",pid=530187,fd=8))                                                                                        \nLISTEN 0      32              [::]:5999         [::]:*    users:(("x11vnc",pid=530187,fd=10))                                                                                       \n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=127, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'nc -zv localhost 5999 2>&1'", _stdout=b'bash: line 1: nc: command not found\n', _stderr=b'')
______________ TestIntercomIntegration.test_vdo_ninja_connection _______________
tests/component/intercom/test_intercom_integration.py:234: in test_vdo_ninja_connection
    assert result.succeeded, "Chrome should be running"
E   AssertionError: Chrome should be running
E   assert False
E    +  where False = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b'ps aux | grep -v grep | grep google-chrome', _stdout=b'', _stderr=b'').succeeded
        host       = <testinfra.host.Host ssh://10.77.8.119>
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=1,
              command=b'ps aux | grep -v grep | grep google-chrome',
              _stdout=b'',
              _stderr=b'')
        self       = <test_intercom_integration.TestIntercomIntegration object at 0x7a3bc2254620>
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ps aux | grep -v grep | grep google-chrome'", _stdout=b'', _stderr=b'')
___________ TestIntercomMonitorLatency.test_monitor_cpu_usage_claim ____________
tests/component/intercom/test_intercom_monitor_latency.py:149: in test_monitor_cpu_usage_claim
    assert "cpu" in content.lower() or "efficient" in content.lower() or "performance" in content.lower()
E   assert (in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mcpu[0m
E     [0m[31m#!/bin/bash[0m
E     [0m[31m# ndi bridge intercom self-monitoring control[0m
E     [0m[31m# manages low-latency mic monitoring through pipewire loopback[0m
E     [0m
E     [0m[31m# configuration[0m
E     [0m[31mmonitor_state_file="/var/run/ndi-bridge/monitor.state"[0m
E     [0m[31mmonitor_module_file="/var/run/ndi-bridge/monitor.module"[0m
E     [0m[31mdefault_volume=50[0m
E     [0m[31mdefault_enabled=false[0m
E     [0m
E     [0m[31m# ensure runtime directory exists[0m
E     [0m[31mmkdir -p /var/run/ndi-bridge[0m
E     [0m
E     [0m[31m# colors for output[0m
E     [0m[31mred='\033[0;31m'[0m
E     [0m[31mgreen='\033[0;32m'[0m
E     [0m[31myellow='\033[1;33m'[0m
E     [0m[31mnc='\033[0m' # no color[0m
E     [0m
E     [0m[31m# function to get csctek devices[0m
E     [0m[31mget_csctek_devices() {[0m
E     [0m[31m    # hardcoded for csctek usb audio and hid device[0m
E     [0m[31m    usb_sink=$(pactl list sinks short | grep "csctek_usb_audio_and_hid" | grep [0m
E     [0m[31m-v monitor | awk '{print $2}' | head -1)[0m
E     [0m[31m    usb_source=$(pactl list sources short | grep "csctek_usb_audio_and_hid" | [0m
E     [0m[31mgrep -v monitor | awk '{print $2}' | head -1)[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -z "$usb_sink" ] || [ -z "$usb_source" ]; then[0m
E     [0m[31m        echo -e "${red}error: csctek usb audio hid device not found${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    echo "$usb_source $usb_sink"[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to enable monitoring[0m
E     [0m[31menable_monitoring() {[0m
E     [0m[31m    local volume=${1:-$default_volume}[0m
E     [0m[31m    [0m
E     [0m[31m    # get devices[0m
E     [0m[31m    read -r source sink <<< $(get_csctek_devices)[0m
E     [0m[31m    if [ $? -ne 0 ]; then[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # check if already enabled[0m
E     [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
E     [0m[31m        module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
E     [0m[31m            echo -e "${yellow}monitoring already enabled${nc}"[0m
E     [0m[31m            set_monitor_volume "$volume"[0m
E     [0m[31m            return 0[0m
E     [0m[31m        fi[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # set pipewire to ultra-low latency mode (32 samples @ 48khz = ~0.67ms)[0m
E     [0m[31m    # this is the absolute minimum for stable operation[0m
E     [0m[31m    pw-metadata -n settings 0 clock.quantum 32 >/dev/null 2>&1[0m
E     [0m[31m    [0m
E     [0m[31m    # load loopback module with minimal latency[0m
E     [0m[31m    # latency_msec=0 requests lowest possible latency[0m
E     [0m[31m    # adjust_time=0 disables dynamic latency adjustment for stability[0m
E     [0m[31m    module_id=$(pactl load-module module-loopback \[0m
E     [0m[31m        source="$source" \[0m
E     [0m[31m        sink="$sink" \[0m
E     [0m[31m        latency_msec=0 \[0m
E     [0m[31m        adjust_time=0 \[0m
E     [0m[31m        source_dont_move=true \[0m
E     [0m[31m        sink_dont_move=true \[0m
E     [0m[31m        sink_input_properties="media.name='self-monitor' [0m
E     [0m[31mapplication.name='ndi-bridge-monitor'")[0m
E     [0m[31m    [0m
E     [0m[31m    if [ $? -eq 0 ]; then[0m
E     [0m[31m        echo "$module_id" > "$monitor_module_file"[0m
E     [0m[31m        echo "true" > "$monitor_state_file"[0m
E     [0m[31m        echo -e "${green}monitoring enabled${nc} (module: $module_id)"[0m
E     [0m[31m        [0m
E     [0m[31m        # wait a moment for pipewire to create the sink input[0m
E     [0m[31m        sleep 0.5[0m
E     [0m[31m        [0m
E     [0m[31m        # set initial volume[0m
E     [0m[31m        set_monitor_volume "$volume"[0m
E     [0m[31m        [0m
E     [0m[31m        # report latency[0m
E     [0m[31m        latency=$(echo "scale=2; 32 / 48" | bc 2>/dev/null || echo "0.67")[0m
E     [0m[31m        echo "target latency: ${latency}ms @ 48khz (ultra-low latency mode)"[0m
E     [0m[31m        [0m
E     [0m[31m        return 0[0m
E     [0m[31m    else[0m
E     [0m[31m        echo -e "${red}failed to enable monitoring${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to disable monitoring[0m
E     [0m[31mdisable_monitoring() {[0m
E     [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
E     [0m[31m        echo -e "${yellow}monitoring not enabled${nc}"[0m
E     [0m[31m        return 0[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m    [0m
E     [0m[31m    # unload the module[0m
E     [0m[31m    pactl unload-module "$module_id" 2>/dev/null[0m
E     [0m[31m    [0m
E     [0m[31m    # clean up state files[0m
E     [0m[31m    rm -f "$monitor_module_file"[0m
E     [0m[31m    echo "false" > "$monitor_state_file"[0m
E     [0m[31m    [0m
E     [0m[31m    # restore normal quantum for better stability when not monitoring[0m
E     [0m[31m    pw-metadata -n settings 0 clock.quantum 1024 >/dev/null 2>&1[0m
E     [0m[31m    [0m
E     [0m[31m    echo -e "${green}monitoring disabled${nc}"[0m
E     [0m[31m    return 0[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to set monitor volume[0m
E     [0m[31mset_monitor_volume() {[0m
E     [0m[31m    local volume=${1:-50}[0m
E     [0m[31m    [0m
E     [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
E     [0m[31m        echo -e "${red}monitoring not enabled${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # find the sink input created by our loopback module[0m
E     [0m[31m    # look for the module id in the owner module field[0m
E     [0m[31m    module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m    sink_input=$(pactl list sink-inputs | grep -b 3 "owner module: $module_id" |[0m
E     [0m[31mgrep "sink input #" | sed 's/sink input #//')[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -n "$sink_input" ]; then[0m
E     [0m[31m        # convert percentage to pulseaudio volume (0-65536)[0m
E     [0m[31m        pa_volume=$((volume * 655))[0m
E     [0m[31m        pactl set-sink-input-volume "$sink_input" "$pa_volume"[0m
E     [0m[31m        echo -e "${green}monitor volume set to ${volume}%${nc}"[0m
E     [0m[31m        [0m
E     [0m[31m        # save volume to state only if not muting (volume > 0)[0m
E     [0m[31m        # this preserves the actual volume when muting/unmuting[0m
E     [0m[31m        if [ "$volume" -gt 0 ]; then[0m
E     [0m[31m            echo "$volume" > "/var/run/ndi-bridge/monitor.volume"[0m
E     [0m[31m        fi[0m
E     [0m[31m        return 0[0m
E     [0m[31m    else[0m
E     [0m[31m        echo -e "${red}monitor sink input not found${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to get monitoring status[0m
E     [0m[31mget_status() {[0m
E     [0m[31m    local enabled="false"[0m
E     [0m[31m    local volume=0[0m
E     [0m[31m    local module_id=""[0m
E     [0m[31m    local latency=""[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
E     [0m[31m        module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
E     [0m[31m            enabled="true"[0m
E     [0m[31m            [0m
E     [0m[31m            # get volume[0m
E     [0m[31m            if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
E     [0m[31m                volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
E     [0m[31m            fi[0m
E     [0m[31m            [0m
E     [0m[31m            # calculate latency[0m
E     [0m[31m            quantum=$(pw-metadata -n settings 0 clock.quantum 2>/dev/null | grep[0m
E     [0m[31m"value:" | cut -d"'" -f2)[0m
E     [0m[31m            rate=$(pw-metadata -n settings 0 clock.rate 2>/dev/null | grep [0m
E     [0m[31m"value:" | cut -d"'" -f2)[0m
E     [0m[31m            if [ -n "$quantum" ] && [ -n "$rate" ]; then[0m
E     [0m[31m                latency=$(echo "scale=2; ($quantum * 1000) / $rate" | bc [0m
E     [0m[31m2>/dev/null || echo "0.67")[0m
E     [0m[31m            fi[0m
E     [0m[31m        fi[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # output json status[0m
E     [0m[31m    cat <<eof[0m
E     [0m[31m{[0m
E     [0m[31m    "enabled": $enabled,[0m
E     [0m[31m    "volume": $volume,[0m
E     [0m[31m    "module_id": "$module_id",[0m
E     [0m[31m    "latency_ms": "$latency"[0m
E     [0m[31m}[0m
E     [0m[31meof[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# main command processing[0m
E     [0m[31mcase "${1:-status}" in[0m
E     [0m[31m    enable)[0m
E     [0m[31m        enable_monitoring "${2:-$default_volume}"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    disable)[0m
E     [0m[31m        disable_monitoring[0m
E     [0m[31m        ;;[0m
E     [0m[31m    volume)[0m
E     [0m[31m        if [ -z "$2" ]; then[0m
E     [0m[31m            echo "usage: $0 volume <0-100>"[0m
E     [0m[31m            exit 1[0m
E     [0m[31m        fi[0m
E     [0m[31m        set_monitor_volume "$2"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    status)[0m
E     [0m[31m        get_status[0m
E     [0m[31m        ;;[0m
E     [0m[31m    restart)[0m
E     [0m[31m        # get current volume if enabled[0m
E     [0m[31m        volume=$default_volume[0m
E     [0m[31m        if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
E     [0m[31m            volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
E     [0m[31m        fi[0m
E     [0m[31m        [0m
E     [0m[31m        disable_monitoring >/dev/null 2>&1[0m
E     [0m[31m        sleep 1[0m
E     [0m[31m        enable_monitoring "$volume"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    *)[0m
E     [0m[31m        echo "ndi bridge intercom self-monitoring control"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "usage: $0 {enable|disable|volume|status|restart} [options]"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "commands:"[0m
E     [0m[31m        echo "  enable [volume]  - enable monitoring (volume: 0-100, default: [0m
E     [0m[31m50)"[0m
E     [0m[31m        echo "  disable          - disable monitoring"[0m
E     [0m[31m        echo "  volume <0-100>   - set monitor volume"[0m
E     [0m[31m        echo "  status           - show current status (json)"[0m
E     [0m[31m        echo "  restart          - restart monitoring with current settings"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "examples:"[0m
E     [0m[31m        echo "  $0 enable        - enable with default 50% volume"[0m
E     [0m[31m        echo "  $0 enable 30     - enable with 30% volume"[0m
E     [0m[31m        echo "  $0 volume 75     - set volume to 75%"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "note: monitoring provides ~0.67ms latency at 48khz (32-sample [0m
E     [0m[31mquantum)"[0m
E     [0m[31m        echo "      this is the lowest achievable latency without hardware [0m
E     [0m[31mmonitoring"[0m
E     [0m[31m        exit 1[0m
E     [0m[31m        ;;[0m
E     [0m[31mesac[0m
E     [0m or in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mefficient[0m
E     [0m[31m#!/bin/bash[0m
E     [0m[31m# ndi bridge intercom self-monitoring control[0m
E     [0m[31m# manages low-latency mic monitoring through pipewire loopback[0m
E     [0m
E     [0m[31m# configuration[0m
E     [0m[31mmonitor_state_file="/var/run/ndi-bridge/monitor.state"[0m
E     [0m[31mmonitor_module_file="/var/run/ndi-bridge/monitor.module"[0m
E     [0m[31mdefault_volume=50[0m
E     [0m[31mdefault_enabled=false[0m
E     [0m
E     [0m[31m# ensure runtime directory exists[0m
E     [0m[31mmkdir -p /var/run/ndi-bridge[0m
E     [0m
E     [0m[31m# colors for output[0m
E     [0m[31mred='\033[0;31m'[0m
E     [0m[31mgreen='\033[0;32m'[0m
E     [0m[31myellow='\033[1;33m'[0m
E     [0m[31mnc='\033[0m' # no color[0m
E     [0m
E     [0m[31m# function to get csctek devices[0m
E     [0m[31mget_csctek_devices() {[0m
E     [0m[31m    # hardcoded for csctek usb audio and hid device[0m
E     [0m[31m    usb_sink=$(pactl list sinks short | grep "csctek_usb_audio_and_hid" | grep [0m
E     [0m[31m-v monitor | awk '{print $2}' | head -1)[0m
E     [0m[31m    usb_source=$(pactl list sources short | grep "csctek_usb_audio_and_hid" | [0m
E     [0m[31mgrep -v monitor | awk '{print $2}' | head -1)[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -z "$usb_sink" ] || [ -z "$usb_source" ]; then[0m
E     [0m[31m        echo -e "${red}error: csctek usb audio hid device not found${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    echo "$usb_source $usb_sink"[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to enable monitoring[0m
E     [0m[31menable_monitoring() {[0m
E     [0m[31m    local volume=${1:-$default_volume}[0m
E     [0m[31m    [0m
E     [0m[31m    # get devices[0m
E     [0m[31m    read -r source sink <<< $(get_csctek_devices)[0m
E     [0m[31m    if [ $? -ne 0 ]; then[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # check if already enabled[0m
E     [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
E     [0m[31m        module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
E     [0m[31m            echo -e "${yellow}monitoring already enabled${nc}"[0m
E     [0m[31m            set_monitor_volume "$volume"[0m
E     [0m[31m            return 0[0m
E     [0m[31m        fi[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # set pipewire to ultra-low latency mode (32 samples @ 48khz = ~0.67ms)[0m
E     [0m[31m    # this is the absolute minimum for stable operation[0m
E     [0m[31m    pw-metadata -n settings 0 clock.quantum 32 >/dev/null 2>&1[0m
E     [0m[31m    [0m
E     [0m[31m    # load loopback module with minimal latency[0m
E     [0m[31m    # latency_msec=0 requests lowest possible latency[0m
E     [0m[31m    # adjust_time=0 disables dynamic latency adjustment for stability[0m
E     [0m[31m    module_id=$(pactl load-module module-loopback \[0m
E     [0m[31m        source="$source" \[0m
E     [0m[31m        sink="$sink" \[0m
E     [0m[31m        latency_msec=0 \[0m
E     [0m[31m        adjust_time=0 \[0m
E     [0m[31m        source_dont_move=true \[0m
E     [0m[31m        sink_dont_move=true \[0m
E     [0m[31m        sink_input_properties="media.name='self-monitor' [0m
E     [0m[31mapplication.name='ndi-bridge-monitor'")[0m
E     [0m[31m    [0m
E     [0m[31m    if [ $? -eq 0 ]; then[0m
E     [0m[31m        echo "$module_id" > "$monitor_module_file"[0m
E     [0m[31m        echo "true" > "$monitor_state_file"[0m
E     [0m[31m        echo -e "${green}monitoring enabled${nc} (module: $module_id)"[0m
E     [0m[31m        [0m
E     [0m[31m        # wait a moment for pipewire to create the sink input[0m
E     [0m[31m        sleep 0.5[0m
E     [0m[31m        [0m
E     [0m[31m        # set initial volume[0m
E     [0m[31m        set_monitor_volume "$volume"[0m
E     [0m[31m        [0m
E     [0m[31m        # report latency[0m
E     [0m[31m        latency=$(echo "scale=2; 32 / 48" | bc 2>/dev/null || echo "0.67")[0m
E     [0m[31m        echo "target latency: ${latency}ms @ 48khz (ultra-low latency mode)"[0m
E     [0m[31m        [0m
E     [0m[31m        return 0[0m
E     [0m[31m    else[0m
E     [0m[31m        echo -e "${red}failed to enable monitoring${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to disable monitoring[0m
E     [0m[31mdisable_monitoring() {[0m
E     [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
E     [0m[31m        echo -e "${yellow}monitoring not enabled${nc}"[0m
E     [0m[31m        return 0[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m    [0m
E     [0m[31m    # unload the module[0m
E     [0m[31m    pactl unload-module "$module_id" 2>/dev/null[0m
E     [0m[31m    [0m
E     [0m[31m    # clean up state files[0m
E     [0m[31m    rm -f "$monitor_module_file"[0m
E     [0m[31m    echo "false" > "$monitor_state_file"[0m
E     [0m[31m    [0m
E     [0m[31m    # restore normal quantum for better stability when not monitoring[0m
E     [0m[31m    pw-metadata -n settings 0 clock.quantum 1024 >/dev/null 2>&1[0m
E     [0m[31m    [0m
E     [0m[31m    echo -e "${green}monitoring disabled${nc}"[0m
E     [0m[31m    return 0[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to set monitor volume[0m
E     [0m[31mset_monitor_volume() {[0m
E     [0m[31m    local volume=${1:-50}[0m
E     [0m[31m    [0m
E     [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
E     [0m[31m        echo -e "${red}monitoring not enabled${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # find the sink input created by our loopback module[0m
E     [0m[31m    # look for the module id in the owner module field[0m
E     [0m[31m    module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m    sink_input=$(pactl list sink-inputs | grep -b 3 "owner module: $module_id" |[0m
E     [0m[31mgrep "sink input #" | sed 's/sink input #//')[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -n "$sink_input" ]; then[0m
E     [0m[31m        # convert percentage to pulseaudio volume (0-65536)[0m
E     [0m[31m        pa_volume=$((volume * 655))[0m
E     [0m[31m        pactl set-sink-input-volume "$sink_input" "$pa_volume"[0m
E     [0m[31m        echo -e "${green}monitor volume set to ${volume}%${nc}"[0m
E     [0m[31m        [0m
E     [0m[31m        # save volume to state only if not muting (volume > 0)[0m
E     [0m[31m        # this preserves the actual volume when muting/unmuting[0m
E     [0m[31m        if [ "$volume" -gt 0 ]; then[0m
E     [0m[31m            echo "$volume" > "/var/run/ndi-bridge/monitor.volume"[0m
E     [0m[31m        fi[0m
E     [0m[31m        return 0[0m
E     [0m[31m    else[0m
E     [0m[31m        echo -e "${red}monitor sink input not found${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to get monitoring status[0m
E     [0m[31mget_status() {[0m
E     [0m[31m    local enabled="false"[0m
E     [0m[31m    local volume=0[0m
E     [0m[31m    local module_id=""[0m
E     [0m[31m    local latency=""[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
E     [0m[31m        module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
E     [0m[31m            enabled="true"[0m
E     [0m[31m            [0m
E     [0m[31m            # get volume[0m
E     [0m[31m            if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
E     [0m[31m                volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
E     [0m[31m            fi[0m
E     [0m[31m            [0m
E     [0m[31m            # calculate latency[0m
E     [0m[31m            quantum=$(pw-metadata -n settings 0 clock.quantum 2>/dev/null | grep[0m
E     [0m[31m"value:" | cut -d"'" -f2)[0m
E     [0m[31m            rate=$(pw-metadata -n settings 0 clock.rate 2>/dev/null | grep [0m
E     [0m[31m"value:" | cut -d"'" -f2)[0m
E     [0m[31m            if [ -n "$quantum" ] && [ -n "$rate" ]; then[0m
E     [0m[31m                latency=$(echo "scale=2; ($quantum * 1000) / $rate" | bc [0m
E     [0m[31m2>/dev/null || echo "0.67")[0m
E     [0m[31m            fi[0m
E     [0m[31m        fi[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # output json status[0m
E     [0m[31m    cat <<eof[0m
E     [0m[31m{[0m
E     [0m[31m    "enabled": $enabled,[0m
E     [0m[31m    "volume": $volume,[0m
E     [0m[31m    "module_id": "$module_id",[0m
E     [0m[31m    "latency_ms": "$latency"[0m
E     [0m[31m}[0m
E     [0m[31meof[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# main command processing[0m
E     [0m[31mcase "${1:-status}" in[0m
E     [0m[31m    enable)[0m
E     [0m[31m        enable_monitoring "${2:-$default_volume}"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    disable)[0m
E     [0m[31m        disable_monitoring[0m
E     [0m[31m        ;;[0m
E     [0m[31m    volume)[0m
E     [0m[31m        if [ -z "$2" ]; then[0m
E     [0m[31m            echo "usage: $0 volume <0-100>"[0m
E     [0m[31m            exit 1[0m
E     [0m[31m        fi[0m
E     [0m[31m        set_monitor_volume "$2"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    status)[0m
E     [0m[31m        get_status[0m
E     [0m[31m        ;;[0m
E     [0m[31m    restart)[0m
E     [0m[31m        # get current volume if enabled[0m
E     [0m[31m        volume=$default_volume[0m
E     [0m[31m        if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
E     [0m[31m            volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
E     [0m[31m        fi[0m
E     [0m[31m        [0m
E     [0m[31m        disable_monitoring >/dev/null 2>&1[0m
E     [0m[31m        sleep 1[0m
E     [0m[31m        enable_monitoring "$volume"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    *)[0m
E     [0m[31m        echo "ndi bridge intercom self-monitoring control"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "usage: $0 {enable|disable|volume|status|restart} [options]"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "commands:"[0m
E     [0m[31m        echo "  enable [volume]  - enable monitoring (volume: 0-100, default: [0m
E     [0m[31m50)"[0m
E     [0m[31m        echo "  disable          - disable monitoring"[0m
E     [0m[31m        echo "  volume <0-100>   - set monitor volume"[0m
E     [0m[31m        echo "  status           - show current status (json)"[0m
E     [0m[31m        echo "  restart          - restart monitoring with current settings"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "examples:"[0m
E     [0m[31m        echo "  $0 enable        - enable with default 50% volume"[0m
E     [0m[31m        echo "  $0 enable 30     - enable with 30% volume"[0m
E     [0m[31m        echo "  $0 volume 75     - set volume to 75%"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "note: monitoring provides ~0.67ms latency at 48khz (32-sample [0m
E     [0m[31mquantum)"[0m
E     [0m[31m        echo "      this is the lowest achievable latency without hardware [0m
E     [0m[31mmonitoring"[0m
E     [0m[31m        exit 1[0m
E     [0m[31m        ;;[0m
E     [0m[31mesac[0m
E     [0m or in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mperformance[0m
E     [0m[31m#!/bin/bash[0m
E     [0m[31m# ndi bridge intercom self-monitoring control[0m
E     [0m[31m# manages low-latency mic monitoring through pipewire loopback[0m
E     [0m
E     [0m[31m# configuration[0m
E     [0m[31mmonitor_state_file="/var/run/ndi-bridge/monitor.state"[0m
E     [0m[31mmonitor_module_file="/var/run/ndi-bridge/monitor.module"[0m
E     [0m[31mdefault_volume=50[0m
E     [0m[31mdefault_enabled=false[0m
E     [0m
E     [0m[31m# ensure runtime directory exists[0m
E     [0m[31mmkdir -p /var/run/ndi-bridge[0m
E     [0m
E     [0m[31m# colors for output[0m
E     [0m[31mred='\033[0;31m'[0m
E     [0m[31mgreen='\033[0;32m'[0m
E     [0m[31myellow='\033[1;33m'[0m
E     [0m[31mnc='\033[0m' # no color[0m
E     [0m
E     [0m[31m# function to get csctek devices[0m
E     [0m[31mget_csctek_devices() {[0m
E     [0m[31m    # hardcoded for csctek usb audio and hid device[0m
E     [0m[31m    usb_sink=$(pactl list sinks short | grep "csctek_usb_audio_and_hid" | grep [0m
E     [0m[31m-v monitor | awk '{print $2}' | head -1)[0m
E     [0m[31m    usb_source=$(pactl list sources short | grep "csctek_usb_audio_and_hid" | [0m
E     [0m[31mgrep -v monitor | awk '{print $2}' | head -1)[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -z "$usb_sink" ] || [ -z "$usb_source" ]; then[0m
E     [0m[31m        echo -e "${red}error: csctek usb audio hid device not found${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    echo "$usb_source $usb_sink"[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to enable monitoring[0m
E     [0m[31menable_monitoring() {[0m
E     [0m[31m    local volume=${1:-$default_volume}[0m
E     [0m[31m    [0m
E     [0m[31m    # get devices[0m
E     [0m[31m    read -r source sink <<< $(get_csctek_devices)[0m
E     [0m[31m    if [ $? -ne 0 ]; then[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # check if already enabled[0m
E     [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
E     [0m[31m        module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
E     [0m[31m            echo -e "${yellow}monitoring already enabled${nc}"[0m
E     [0m[31m            set_monitor_volume "$volume"[0m
E     [0m[31m            return 0[0m
E     [0m[31m        fi[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # set pipewire to ultra-low latency mode (32 samples @ 48khz = ~0.67ms)[0m
E     [0m[31m    # this is the absolute minimum for stable operation[0m
E     [0m[31m    pw-metadata -n settings 0 clock.quantum 32 >/dev/null 2>&1[0m
E     [0m[31m    [0m
E     [0m[31m    # load loopback module with minimal latency[0m
E     [0m[31m    # latency_msec=0 requests lowest possible latency[0m
E     [0m[31m    # adjust_time=0 disables dynamic latency adjustment for stability[0m
E     [0m[31m    module_id=$(pactl load-module module-loopback \[0m
E     [0m[31m        source="$source" \[0m
E     [0m[31m        sink="$sink" \[0m
E     [0m[31m        latency_msec=0 \[0m
E     [0m[31m        adjust_time=0 \[0m
E     [0m[31m        source_dont_move=true \[0m
E     [0m[31m        sink_dont_move=true \[0m
E     [0m[31m        sink_input_properties="media.name='self-monitor' [0m
E     [0m[31mapplication.name='ndi-bridge-monitor'")[0m
E     [0m[31m    [0m
E     [0m[31m    if [ $? -eq 0 ]; then[0m
E     [0m[31m        echo "$module_id" > "$monitor_module_file"[0m
E     [0m[31m        echo "true" > "$monitor_state_file"[0m
E     [0m[31m        echo -e "${green}monitoring enabled${nc} (module: $module_id)"[0m
E     [0m[31m        [0m
E     [0m[31m        # wait a moment for pipewire to create the sink input[0m
E     [0m[31m        sleep 0.5[0m
E     [0m[31m        [0m
E     [0m[31m        # set initial volume[0m
E     [0m[31m        set_monitor_volume "$volume"[0m
E     [0m[31m        [0m
E     [0m[31m        # report latency[0m
E     [0m[31m        latency=$(echo "scale=2; 32 / 48" | bc 2>/dev/null || echo "0.67")[0m
E     [0m[31m        echo "target latency: ${latency}ms @ 48khz (ultra-low latency mode)"[0m
E     [0m[31m        [0m
E     [0m[31m        return 0[0m
E     [0m[31m    else[0m
E     [0m[31m        echo -e "${red}failed to enable monitoring${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to disable monitoring[0m
E     [0m[31mdisable_monitoring() {[0m
E     [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
E     [0m[31m        echo -e "${yellow}monitoring not enabled${nc}"[0m
E     [0m[31m        return 0[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m    [0m
E     [0m[31m    # unload the module[0m
E     [0m[31m    pactl unload-module "$module_id" 2>/dev/null[0m
E     [0m[31m    [0m
E     [0m[31m    # clean up state files[0m
E     [0m[31m    rm -f "$monitor_module_file"[0m
E     [0m[31m    echo "false" > "$monitor_state_file"[0m
E     [0m[31m    [0m
E     [0m[31m    # restore normal quantum for better stability when not monitoring[0m
E     [0m[31m    pw-metadata -n settings 0 clock.quantum 1024 >/dev/null 2>&1[0m
E     [0m[31m    [0m
E     [0m[31m    echo -e "${green}monitoring disabled${nc}"[0m
E     [0m[31m    return 0[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to set monitor volume[0m
E     [0m[31mset_monitor_volume() {[0m
E     [0m[31m    local volume=${1:-50}[0m
E     [0m[31m    [0m
E     [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
E     [0m[31m        echo -e "${red}monitoring not enabled${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # find the sink input created by our loopback module[0m
E     [0m[31m    # look for the module id in the owner module field[0m
E     [0m[31m    module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m    sink_input=$(pactl list sink-inputs | grep -b 3 "owner module: $module_id" |[0m
E     [0m[31mgrep "sink input #" | sed 's/sink input #//')[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -n "$sink_input" ]; then[0m
E     [0m[31m        # convert percentage to pulseaudio volume (0-65536)[0m
E     [0m[31m        pa_volume=$((volume * 655))[0m
E     [0m[31m        pactl set-sink-input-volume "$sink_input" "$pa_volume"[0m
E     [0m[31m        echo -e "${green}monitor volume set to ${volume}%${nc}"[0m
E     [0m[31m        [0m
E     [0m[31m        # save volume to state only if not muting (volume > 0)[0m
E     [0m[31m        # this preserves the actual volume when muting/unmuting[0m
E     [0m[31m        if [ "$volume" -gt 0 ]; then[0m
E     [0m[31m            echo "$volume" > "/var/run/ndi-bridge/monitor.volume"[0m
E     [0m[31m        fi[0m
E     [0m[31m        return 0[0m
E     [0m[31m    else[0m
E     [0m[31m        echo -e "${red}monitor sink input not found${nc}" >&2[0m
E     [0m[31m        return 1[0m
E     [0m[31m    fi[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# function to get monitoring status[0m
E     [0m[31mget_status() {[0m
E     [0m[31m    local enabled="false"[0m
E     [0m[31m    local volume=0[0m
E     [0m[31m    local module_id=""[0m
E     [0m[31m    local latency=""[0m
E     [0m[31m    [0m
E     [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
E     [0m[31m        module_id=$(cat "$monitor_module_file")[0m
E     [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
E     [0m[31m            enabled="true"[0m
E     [0m[31m            [0m
E     [0m[31m            # get volume[0m
E     [0m[31m            if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
E     [0m[31m                volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
E     [0m[31m            fi[0m
E     [0m[31m            [0m
E     [0m[31m            # calculate latency[0m
E     [0m[31m            quantum=$(pw-metadata -n settings 0 clock.quantum 2>/dev/null | grep[0m
E     [0m[31m"value:" | cut -d"'" -f2)[0m
E     [0m[31m            rate=$(pw-metadata -n settings 0 clock.rate 2>/dev/null | grep [0m
E     [0m[31m"value:" | cut -d"'" -f2)[0m
E     [0m[31m            if [ -n "$quantum" ] && [ -n "$rate" ]; then[0m
E     [0m[31m                latency=$(echo "scale=2; ($quantum * 1000) / $rate" | bc [0m
E     [0m[31m2>/dev/null || echo "0.67")[0m
E     [0m[31m            fi[0m
E     [0m[31m        fi[0m
E     [0m[31m    fi[0m
E     [0m[31m    [0m
E     [0m[31m    # output json status[0m
E     [0m[31m    cat <<eof[0m
E     [0m[31m{[0m
E     [0m[31m    "enabled": $enabled,[0m
E     [0m[31m    "volume": $volume,[0m
E     [0m[31m    "module_id": "$module_id",[0m
E     [0m[31m    "latency_ms": "$latency"[0m
E     [0m[31m}[0m
E     [0m[31meof[0m
E     [0m[31m}[0m
E     [0m
E     [0m[31m# main command processing[0m
E     [0m[31mcase "${1:-status}" in[0m
E     [0m[31m    enable)[0m
E     [0m[31m        enable_monitoring "${2:-$default_volume}"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    disable)[0m
E     [0m[31m        disable_monitoring[0m
E     [0m[31m        ;;[0m
E     [0m[31m    volume)[0m
E     [0m[31m        if [ -z "$2" ]; then[0m
E     [0m[31m            echo "usage: $0 volume <0-100>"[0m
E     [0m[31m            exit 1[0m
E     [0m[31m        fi[0m
E     [0m[31m        set_monitor_volume "$2"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    status)[0m
E     [0m[31m        get_status[0m
E     [0m[31m        ;;[0m
E     [0m[31m    restart)[0m
E     [0m[31m        # get current volume if enabled[0m
E     [0m[31m        volume=$default_volume[0m
E     [0m[31m        if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
E     [0m[31m            volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
E     [0m[31m        fi[0m
E     [0m[31m        [0m
E     [0m[31m        disable_monitoring >/dev/null 2>&1[0m
E     [0m[31m        sleep 1[0m
E     [0m[31m        enable_monitoring "$volume"[0m
E     [0m[31m        ;;[0m
E     [0m[31m    *)[0m
E     [0m[31m        echo "ndi bridge intercom self-monitoring control"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "usage: $0 {enable|disable|volume|status|restart} [options]"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "commands:"[0m
E     [0m[31m        echo "  enable [volume]  - enable monitoring (volume: 0-100, default: [0m
E     [0m[31m50)"[0m
E     [0m[31m        echo "  disable          - disable monitoring"[0m
E     [0m[31m        echo "  volume <0-100>   - set monitor volume"[0m
E     [0m[31m        echo "  status           - show current status (json)"[0m
E     [0m[31m        echo "  restart          - restart monitoring with current settings"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "examples:"[0m
E     [0m[31m        echo "  $0 enable        - enable with default 50% volume"[0m
E     [0m[31m        echo "  $0 enable 30     - enable with 30% volume"[0m
E     [0m[31m        echo "  $0 volume 75     - set volume to 75%"[0m
E     [0m[31m        echo ""[0m
E     [0m[31m        echo "note: monitoring provides ~0.67ms latency at 48khz (32-sample [0m
E     [0m[31mquantum)"[0m
E     [0m[31m        echo "      this is the lowest achievable latency without hardware [0m
E     [0m[31mmonitoring"[0m
E     [0m[31m        exit 1[0m
E     [0m[31m        ;;[0m
E     [0m[31mesac[0m
E     [0m)
        content    = ('#!/bin/bash\n'
 '# NDI Bridge Intercom Self-Monitoring Control\n'
 '# Manages low-latency mic monitoring through PipeWire loopback\n'
 '\n'
 '# Configuration\n'
 'MONITOR_STATE_FILE="/var/run/ndi-bridge/monitor.state"\n'
 'MONITOR_MODULE_FILE="/var/run/ndi-bridge/monitor.module"\n'
 'DEFAULT_VOLUME=50\n'
 'DEFAULT_ENABLED=false\n'
 '\n'
 '# Ensure runtime directory exists\n'
 'mkdir -p /var/run/ndi-bridge\n'
 '\n'
 '# Colors for output\n'
 "RED='\\033[0;31m'\n"
 "GREEN='\\033[0;32m'\n"
 "YELLOW='\\033[1;33m'\n"
 "NC='\\033[0m' # No Color\n"
 '\n'
 '# Function to get CSCTEK devices\n'
 'get_csctek_devices() {\n'
 '    # HARDCODED for CSCTEK USB Audio and HID device\n'
 '    USB_SINK=$(pactl list sinks short | grep "CSCTEK_USB_Audio_and_HID" | '
 "grep -v monitor | awk '{print $2}' | head -1)\n"
 '    USB_SOURCE=$(pactl list sources short | grep "CSCTEK_USB_Audio_and_HID" '
 "| grep -v monitor | awk '{print $2}' | head -1)\n"
 '    \n'
 '    if [ -z "$USB_SINK" ] || [ -z "$USB_SOURCE" ]; then\n'
 '        echo -e "${RED}Error: CSCTEK USB Audio HID device not found${NC}" '
 '>&2\n'
 '        return 1\n'
 '    fi\n'
 '    \n'
 '    echo "$USB_SOURCE $USB_SINK"\n'
 '}\n'
 '\n'
 '# Function to enable monitoring\n'
 'enable_monitoring() {\n'
 '    local volume=${1:-$DEFAULT_VOLUME}\n'
 '    \n'
 '    # Get devices\n'
 '    read -r source sink <<< $(get_csctek_devices)\n'
 '    if [ $? -ne 0 ]; then\n'
 '        return 1\n'
 '    fi\n'
 '    \n'
 '    # Check if already enabled\n'
 '    if [ -f "$MONITOR_MODULE_FILE" ]; then\n'
 '        module_id=$(cat "$MONITOR_MODULE_FILE")\n'
 '        if pactl list modules short | grep -q "^$module_id"; then\n'
 '            echo -e "${YELLOW}Monitoring already enabled${NC}"\n'
 '            set_monitor_volume "$volume"\n'
 '            return 0\n'
 '        fi\n'
 '    fi\n'
 '    \n'
 '    # Set PipeWire to ultra-low latency mode (32 samples @ 48kHz = ~0.67ms)\n'
 '    # This is the absolute minimum for stable operation\n'
 '    pw-metadata -n settings 0 clock.quantum 32 >/dev/null 2>&1\n'
 '    \n'
 '    # Load loopback module with minimal latency\n'
 '    # latency_msec=0 requests lowest possible latency\n'
 '    # adjust_time=0 disables dynamic latency adjustment for stability\n'
 '    module_id=$(pactl load-module module-loopback \\\n'
 '        source="$source" \\\n'
 '        sink="$sink" \\\n'
 '        latency_msec=0 \\\n'
 '        adjust_time=0 \\\n'
 '        source_dont_move=true \\\n'
 '        sink_dont_move=true \\\n'
 '        sink_input_properties="media.name=\'Self-Monitor\' '
 'application.name=\'NDI-Bridge-Monitor\'")\n'
 '    \n'
 '    if [ $? -eq 0 ]; then\n'
 '        echo "$module_id" > "$MONITOR_MODULE_FILE"\n'
 '        echo "true" > "$MONITOR_STATE_FILE"\n'
 '        echo -e "${GREEN}Monitoring enabled${NC} (module: $module_id)"\n'
 '        \n'
 '        # Wait a moment for PipeWire to create the sink input\n'
 '        sleep 0.5\n'
 '        \n'
 '        # Set initial volume\n'
 '        set_monitor_volume "$volume"\n'
 '        \n'
 '        # Report latency\n'
 '        latency=$(echo "scale=2; 32 / 48" | bc 2>/dev/null || echo "0.67")\n'
 '        echo "Target latency: ${latency}ms @ 48kHz (Ultra-low latency '
 'mode)"\n'
 '        \n'
 '        return 0\n'
 '    else\n'
 '        echo -e "${RED}Failed to enable monitoring${NC}" >&2\n'
 '        return 1\n'
 '    fi\n'
 '}\n'
 '\n'
 '# Function to disable monitoring\n'
 'disable_monitoring() {\n'
 '    if [ ! -f "$MONITOR_MODULE_FILE" ]; then\n'
 '        echo -e "${YELLOW}Monitoring not enabled${NC}"\n'
 '        return 0\n'
 '    fi\n'
 '    \n'
 '    module_id=$(cat "$MONITOR_MODULE_FILE")\n'
 '    \n'
 '    # Unload the module\n'
 '    pactl unload-module "$module_id" 2>/dev/null\n'
 '    \n'
 '    # Clean up state files\n'
 '    rm -f "$MONITOR_MODULE_FILE"\n'
 '    echo "false" > "$MONITOR_STATE_FILE"\n'
 '    \n'
 '    # Restore normal quantum for better stability when not monitoring\n'
 '    pw-metadata -n settings 0 clock.quantum 1024 >/dev/null 2>&1\n'
 '    \n'
 '    echo -e "${GREEN}Monitoring disabled${NC}"\n'
 '    return 0\n'
 '}\n'
 '\n'
 '# Function to set monitor volume\n'
 'set_monitor_volume() {\n'
 '    local volume=${1:-50}\n'
 '    \n'
 '    if [ ! -f "$MONITOR_MODULE_FILE" ]; then\n'
 '        echo -e "${RED}Monitoring not enabled${NC}" >&2\n'
 '        return 1\n'
 '    fi\n'
 '    \n'
 '    # Find the sink input created by our loopback module\n'
 '    # Look for the module ID in the owner module field\n'
 '    module_id=$(cat "$MONITOR_MODULE_FILE")\n'
 '    sink_input=$(pactl list sink-inputs | grep -B 3 "Owner Module: '
 '$module_id" | grep "Sink Input #" | sed \'s/Sink Input #//\')\n'
 '    \n'
 '    if [ -n "$sink_input" ]; then\n'
 '        # Convert percentage to PulseAudio volume (0-65536)\n'
 '        pa_volume=$((volume * 655))\n'
 '        pactl set-sink-input-volume "$sink_input" "$pa_volume"\n'
 '        echo -e "${GREEN}Monitor volume set to ${volume}%${NC}"\n'
 '        \n'
 '        # Save volume to state ONLY if not muting (volume > 0)\n'
 '        # This preserves the actual volume when muting/unmuting\n'
 '        if [ "$volume" -gt 0 ]; then\n'
 '            echo "$volume" > "/var/run/ndi-bridge/monitor.volume"\n'
 '        fi\n'
 '        return 0\n'
 '    else\n'
 '        echo -e "${RED}Monitor sink input not found${NC}" >&2\n'
 '        return 1\n'
 '    fi\n'
 '}\n'
 '\n'
 '# Function to get monitoring status\n'
 'get_status() {\n'
 '    local enabled="false"\n'
 '    local volume=0\n'
 '    local module_id=""\n'
 '    local latency=""\n'
 '    \n'
 '    if [ -f "$MONITOR_MODULE_FILE" ]; then\n'
 '        module_id=$(cat "$MONITOR_MODULE_FILE")\n'
 '        if pactl list modules short | grep -q "^$module_id"; then\n'
 '            enabled="true"\n'
 '            \n'
 '            # Get volume\n'
 '            if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then\n'
 '                volume=$(cat "/var/run/ndi-bridge/monitor.volume")\n'
 '            fi\n'
 '            \n'
 '            # Calculate latency\n'
 '            quantum=$(pw-metadata -n settings 0 clock.quantum 2>/dev/null | '
 'grep "value:" | cut -d"\'" -f2)\n'
 '            rate=$(pw-metadata -n settings 0 clock.rate 2>/dev/null | grep '
 '"value:" | cut -d"\'" -f2)\n'
 '            if [ -n "$quantum" ] && [ -n "$rate" ]; then\n'
 '                latency=$(echo "scale=2; ($quantum * 1000) / $rate" | bc '
 '2>/dev/null || echo "0.67")\n'
 '            fi\n'
 '        fi\n'
 '    fi\n'
 '    \n'
 '    # Output JSON status\n'
 '    cat <<EOF\n'
 '{\n'
 '    "enabled": $enabled,\n'
 '    "volume": $volume,\n'
 '    "module_id": "$module_id",\n'
 '    "latency_ms": "$latency"\n'
 '}\n'
 'EOF\n'
 '}\n'
 '\n'
 '# Main command processing\n'
 'case "${1:-status}" in\n'
 '    enable)\n'
 '        enable_monitoring "${2:-$DEFAULT_VOLUME}"\n'
 '        ;;\n'
 '    disable)\n'
 '        disable_monitoring\n'
 '        ;;\n'
 '    volume)\n'
 '        if [ -z "$2" ]; then\n'
 '            echo "Usage: $0 volume <0-100>"\n'
 '            exit 1\n'
 '        fi\n'
 '        set_monitor_volume "$2"\n'
 '        ;;\n'
 '    status)\n'
 '        get_status\n'
 '        ;;\n'
 '    restart)\n'
 '        # Get current volume if enabled\n'
 '        volume=$DEFAULT_VOLUME\n'
 '        if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then\n'
 '            volume=$(cat "/var/run/ndi-bridge/monitor.volume")\n'
 '        fi\n'
 '        \n'
 '        disable_monitoring >/dev/null 2>&1\n'
 '        sleep 1\n'
 '        enable_monitoring "$volume"\n'
 '        ;;\n'
 '    *)\n'
 '        echo "NDI Bridge Intercom Self-Monitoring Control"\n'
 '        echo ""\n'
 '        echo "Usage: $0 {enable|disable|volume|status|restart} [options]"\n'
 '        echo ""\n'
 '        echo "Commands:"\n'
 '        echo "  enable [volume]  - Enable monitoring (volume: 0-100, '
 'default: 50)"\n'
 '        echo "  disable          - Disable monitoring"\n'
 '        echo "  volume <0-100>   - Set monitor volume"\n'
 '        echo "  status           - Show current status (JSON)"\n'
 '        echo "  restart          - Restart monitoring with current '
 'settings"\n'
 '        echo ""\n'
 '        echo "Examples:"\n'
 '        echo "  $0 enable        - Enable with default 50% volume"\n'
 '        echo "  $0 enable 30     - Enable with 30% volume"\n'
 '        echo "  $0 volume 75     - Set volume to 75%"\n'
 '        echo ""\n'
 '        echo "Note: Monitoring provides ~0.67ms latency at 48kHz (32-sample '
 'quantum)"\n'
 '        echo "      This is the lowest achievable latency without hardware '
 'monitoring"\n'
 '        exit 1\n'
 '        ;;\n'
 'esac')
        host       = <testinfra.host.Host ssh://10.77.8.119>
        script     = <file /usr/local/bin/ndi-bridge-intercom-monitor>
        self       = <test_intercom_monitor_latency.TestIntercomMonitorLatency object at 0x7a3bc2255d30>
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'cat -- /usr/local/bin/ndi-bridge-intercom-monitor'", _stdout=b'#!/bin/bash\n# NDI Bridge Intercom Self-Monitoring Control\n# Manages low-latency mic monitoring through PipeWire loopback\n\n# Configuration\nMONITOR_STATE_FILE="/var/run/ndi-bridge/monitor.state"\nMONITOR_MODULE_FILE="/var/run/ndi-bridge/monitor.module"\nDEFAULT_VOLUME=50\nDEFAULT_ENABLED=false\n\n# Ensure runtime directory exists\nmkdir -p /var/run/ndi-bridge\n\n# Colors for output\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nYELLOW=\'\\033[1;33m\'\nNC=\'\\033[0m\' # No Color\n\n# Function to get CSCTEK devices\nget_csctek_devices() {\n    # HARDCODED for CSCTEK USB Audio and HID device\n    USB_SINK=$(pactl list sinks short | grep "CSCTEK_USB_Audio_and_HID" | grep -v monitor | awk \'{print $2}\' | head -1)\n    USB_SOURCE=$(pactl list sources short | grep "CSCTEK_USB_Audio_and_HID" | grep -v monitor | awk \'{print $2}\' | head -1)\n    \n    if [ -z "$USB_SINK" ] || [ -z "$USB_SOURCE" ]; then\n        echo -e "${RED}Error: CSCTEK USB Audio HID device not found${NC}" >&2\n        return 1\n    fi\n    \n    echo "$USB_SOURCE $USB_SINK"\n}\n\n# Function to enable monitoring\nenable_monitoring() {\n    local volume=${1:-$DEFAULT_VOLUME}\n    \n    # Get devices\n    read -r source sink <<< $(get_csctek_devices)\n    if [ $? -ne 0 ]; then\n        return 1\n    fi\n    \n    # Check if already enabled\n    if [ -f "$MONITOR_MODULE_FILE" ]; then\n        module_id=$(cat "$MONITOR_MODULE_FILE")\n        if pactl list modules short | grep -q "^$module_id"; then\n            echo -e "${YELLOW}Monitoring already enabled${NC}"\n            set_monitor_volume "$volume"\n            return 0\n        fi\n    fi\n    \n    # Set PipeWire to ultra-low latency mode (32 samples @ 48kHz = ~0.67ms)\n    # This is the absolute minimum for stable operation\n    pw-metadata -n settings 0 clock.quantum 32 >/dev/null 2>&1\n    \n    # Load loopback module with minimal latency\n    # latency_msec=0 requests lowest possible latency\n    # adjust_time=0 disables dynamic latency adjustment for stability\n    module_id=$(pactl load-module module-loopback \\\n        source="$source" \\\n        sink="$sink" \\\n        latency_msec=0 \\\n        adjust_time=0 \\\n        source_dont_move=true \\\n        sink_dont_move=true \\\n        sink_input_properties="media.name=\'Self-Monitor\' application.name=\'NDI-Bridge-Monitor\'")\n    \n    if [ $? -eq 0 ]; then\n        echo "$module_id" > "$MONITOR_MODULE_FILE"\n        echo "true" > "$MONITOR_STATE_FILE"\n        echo -e "${GREEN}Monitoring enabled${NC} (module: $module_id)"\n        \n        # Wait a moment for PipeWire to create the sink input\n        sleep 0.5\n        \n        # Set initial volume\n        set_monitor_volume "$volume"\n        \n        # Report latency\n        latency=$(echo "scale=2; 32 / 48" | bc 2>/dev/null || echo "0.67")\n        echo "Target latency: ${latency}ms @ 48kHz (Ultra-low latency mode)"\n        \n        return 0\n    else\n        echo -e "${RED}Failed to enable monitoring${NC}" >&2\n        return 1\n    fi\n}\n\n# Function to disable monitoring\ndisable_monitoring() {\n    if [ ! -f "$MONITOR_MODULE_FILE" ]; then\n        echo -e "${YELLOW}Monitoring not enabled${NC}"\n        return 0\n    fi\n    \n    module_id=$(cat "$MONITOR_MODULE_FILE")\n    \n    # Unload the module\n    pactl unload-module "$module_id" 2>/dev/null\n    \n    # Clean up state files\n    rm -f "$MONITOR_MODULE_FILE"\n    echo "false" > "$MONITOR_STATE_FILE"\n    \n    # Restore normal quantum for better stability when not monitoring\n    pw-metadata -n settings 0 clock.quantum 1024 >/dev/null 2>&1\n    \n    echo -e "${GREEN}Monitoring disabled${NC}"\n    return 0\n}\n\n# Function to set monitor volume\nset_monitor_volume() {\n    local volume=${1:-50}\n    \n    if [ ! -f "$MONITOR_MODULE_FILE" ]; then\n        echo -e "${RED}Monitoring not enabled${NC}" >&2\n        return 1\n    fi\n    \n    # Find the sink input created by our loopback module\n    # Look for the module ID in the owner module field\n    module_id=$(cat "$MONITOR_MODULE_FILE")\n    sink_input=$(pactl list sink-inputs | grep -B 3 "Owner Module: $module_id" | grep "Sink Input #" | sed \'s/Sink Input #//\')\n    \n    if [ -n "$sink_input" ]; then\n        # Convert percentage to PulseAudio volume (0-65536)\n        pa_volume=$((volume * 655))\n        pactl set-sink-input-volume "$sink_input" "$pa_volume"\n        echo -e "${GREEN}Monitor volume set to ${volume}%${NC}"\n        \n        # Save volume to state ONLY if not muting (volume > 0)\n        # This preserves the actual volume when muting/unmuting\n        if [ "$volume" -gt 0 ]; then\n            echo "$volume" > "/var/run/ndi-bridge/monitor.volume"\n        fi\n        return 0\n    else\n        echo -e "${RED}Monitor sink input not found${NC}" >&2\n        return 1\n    fi\n}\n\n# Function to get monitoring status\nget_status() {\n    local enabled="false"\n    local volume=0\n    local module_id=""\n    local latency=""\n    \n    if [ -f "$MONITOR_MODULE_FILE" ]; then\n        module_id=$(cat "$MONITOR_MODULE_FILE")\n        if pactl list modules short | grep -q "^$module_id"; then\n            enabled="true"\n            \n            # Get volume\n            if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then\n                volume=$(cat "/var/run/ndi-bridge/monitor.volume")\n            fi\n            \n            # Calculate latency\n            quantum=$(pw-metadata -n settings 0 clock.quantum 2>/dev/null | grep "value:" | cut -d"\'" -f2)\n            rate=$(pw-metadata -n settings 0 clock.rate 2>/dev/null | grep "value:" | cut -d"\'" -f2)\n            if [ -n "$quantum" ] && [ -n "$rate" ]; then\n                latency=$(echo "scale=2; ($quantum * 1000) / $rate" | bc 2>/dev/null || echo "0.67")\n            fi\n        fi\n    fi\n    \n    # Output JSON status\n    cat <<EOF\n{\n    "enabled": $enabled,\n    "volume": $volume,\n    "module_id": "$module_id",\n    "latency_ms": "$latency"\n}\nEOF\n}\n\n# Main command processing\ncase "${1:-status}" in\n    enable)\n        enable_monitoring "${2:-$DEFAULT_VOLUME}"\n        ;;\n    disable)\n        disable_monitoring\n        ;;\n    volume)\n        if [ -z "$2" ]; then\n            echo "Usage: $0 volume <0-100>"\n            exit 1\n        fi\n        set_monitor_volume "$2"\n        ;;\n    status)\n        get_status\n        ;;\n    restart)\n        # Get current volume if enabled\n        volume=$DEFAULT_VOLUME\n        if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then\n            volume=$(cat "/var/run/ndi-bridge/monitor.volume")\n        fi\n        \n        disable_monitoring >/dev/null 2>&1\n        sleep 1\n        enable_monitoring "$volume"\n        ;;\n    *)\n        echo "NDI Bridge Intercom Self-Monitoring Control"\n        echo ""\n        echo "Usage: $0 {enable|disable|volume|status|restart} [options]"\n        echo ""\n        echo "Commands:"\n        echo "  enable [volume]  - Enable monitoring (volume: 0-100, default: 50)"\n        echo "  disable          - Disable monitoring"\n        echo "  volume <0-100>   - Set monitor volume"\n        echo "  status           - Show current status (JSON)"\n        echo "  restart          - Restart monitoring with current settings"\n        echo ""\n        echo "Examples:"\n        echo "  $0 enable        - Enable with default 50% volume"\n        echo "  $0 enable 30     - Enable with 30% volume"\n        echo "  $0 volume 75     - Set volume to 75%"\n        echo ""\n        echo "Note: Monitoring provides ~0.67ms latency at 48kHz (32-sample quantum)"\n        echo "      This is the lowest achievable latency without hardware monitoring"\n        exit 1\n        ;;\nesac', _stderr=b'')
_________ TestIntercomMonitorLatency.test_monitor_enable_disable_cycle _________
tests/component/intercom/test_intercom_monitor_latency.py:171: in test_monitor_enable_disable_cycle
    assert "disabled" in result.stdout.lower(), f"Should be disabled in cycle {cycle}"
E   AssertionError: Should be disabled in cycle 0
E   assert in failed. [pytest-clarity diff shown]
E     [0m
E     [0m[32mLHS[0m vs [31mRHS[0m shown below
E     [0m
E     [0m[32mdisabled[0m
E     [0m[31m{[0m
E     [0m[31m    "enabled": false,[0m
E     [0m[31m    "volume": 0,[0m
E     [0m[31m    "module_id": "",[0m
E     [0m[31m    "latency_ms": ""[0m
E     [0m[31m}[0m
E     [0m
        cycle      = 0
        host       = <testinfra.host.Host ssh://10.77.8.119>
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ndi-bridge-intercom-monitor status',
              _stdout=b'{\n    "enabled": false,\n    "volume": 0,\n    "module'
                      b'_id": "",\n    "latency_ms": ""\n}\n',
              _stderr=b'')
        self       = <test_intercom_monitor_latency.TestIntercomMonitorLatency object at 0x7a3bc2255f10>
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor enable'", _stdout=b'\x1b[0;32mMonitoring enabled\x1b[0m (module: 536870913)\n\x1b[0;32mMonitor volume set to 50%\x1b[0m\nTarget latency: .66ms @ 48kHz (Ultra-low latency mode)\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor status'", _stdout=b'{\n    "enabled": true,\n    "volume": 50,\n    "module_id": "536870913",\n    "latency_ms": ""\n}\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor disable'", _stdout=b'\x1b[0;32mMonitoring disabled\x1b[0m\n', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ndi-bridge-intercom-monitor status'", _stdout=b'{\n    "enabled": false,\n    "volume": 0,\n    "module_id": "",\n    "latency_ms": ""\n}\n', _stderr=b'')
______________ TestIntercomProcesses.test_process_resource_usage _______________
tests/component/intercom/test_intercom_processes.py:151: in test_process_resource_usage
    mem_percent = float(fields[3])
E   IndexError: list index out of range
        fields     = []
        host       = <testinfra.host.Host ssh://10.77.8.119>
        result     = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>,
              exit_status=0,
              command=b'ps aux | grep -v grep | grep google-chrome | head -1',
              _stdout=b'',
              _stderr=b'')
        self       = <test_intercom_processes.TestIntercomProcesses object at 0x7a3bc2257aa0>
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=0, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'ps aux | grep -v grep | grep google-chrome | head -1'", _stdout=b'', _stderr=b'')
_________________ TestIntercomWeb.test_web_backend_files_exist _________________
tests/component/intercom/test_intercom_web.py:51: in test_web_backend_files_exist
    assert file.exists, f"{file_path} should exist"
E   AssertionError: /opt/ndi-bridge/web/backend/main.py should exist
E   assert False
E    +  where False = <file /usr/local/share/ndi-bridge/web/backend/main.py>.exists
        alt_path   = '/usr/local/share/ndi-bridge/web/backend/main.py'
        backend_files = ['/opt/ndi-bridge/web/backend/main.py',
 '/opt/ndi-bridge/web/backend/api/intercom.py',
 '/opt/ndi-bridge/web/backend/services/state_manager.py']
        file       = <file /usr/local/share/ndi-bridge/web/backend/main.py>
        file_path  = '/opt/ndi-bridge/web/backend/main.py'
        host       = <testinfra.host.Host ssh://10.77.8.119>
        self       = <test_intercom_web.TestIntercomWeb object at 0x7a3bc16f61e0>
------------------------------ Captured log call -------------------------------
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'test -e /opt/ndi-bridge/web/backend/main.py'", _stdout=b'', _stderr=b'')
DEBUG    testinfra:base.py:328 RUN CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b"ssh -o User=root -i /home/newlevel/.ssh/ndi_test_key -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPersist=60s 10.77.8.119 'test -e /usr/local/share/ndi-bridge/web/backend/main.py'", _stdout=b'', _stderr=b'')
============================= slowest 10 durations =============================
27.90s call     component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_service_restart_recovery
27.60s call     component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_survives_intercom_restart
25.87s call     component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_persistence_across_restart
15.91s call     component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_service_restart
12.87s call     component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_configuration_persistence_workflow
12.82s call     component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_chrome_process_running
11.93s call     component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_monitor_workflow
8.26s call     component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_quantum_adjustment
7.73s call     component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_save_and_load
6.57s call     component/intercom/test_intercom_audio.py::TestIntercomAudio::test_audio_monitor_control
- Generated html report: file:///mnt/c/Users/newlevel/Documents/GitHub/ndi-bridge/test-report.html -
=========================== short test summary info ============================
SKIPPED [1] tests/component/intercom/test_intercom_monitor_latency.py:184: Monitor level not in status output
SKIPPED [1] tests/component/intercom/test_intercom_processes.py:171: Chrome not running
SKIPPED [1] tests/component/intercom/test_intercom_web.py:70: Web frontend files not found
FAILED tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_persistence_across_restart - AssertionError: Input volume should persist
assert == failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32m50[0m
  [0m[31m100[0m
  [0m
FAILED tests/component/intercom/test_intercom_config.py::TestIntercomConfig::test_config_validation - KeyError: 'mic_volume'
FAILED tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_status_command - assert (in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mndi-bridge-intercom.service[0m
  [0m[31mNDI Bridge Intercom Status[0m
  [0m[31m==========================[0m
  [0m
  [0m[31mService: Running[0m
  [0m[31mChrome: Active[0m
  [0m[31mVNC: Available on port 5999[0m
  [0m[31mAudio: PipeWire active[0m
  [0m
  [0m[31mRoom: nl_interkom[0m
  [0m[31mDevice ID: ndi-bridge-cam1[0m
  [0m
  [0m[31mRecent logs:[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.376097:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.376803:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.377211:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.676841:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.677101:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m or in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mActive:[0m
  [0m[31mNDI Bridge Intercom Status[0m
  [0m[31m==========================[0m
  [0m
  [0m[31mService: Running[0m
  [0m[31mChrome: Active[0m
  [0m[31mVNC: Available on port 5999[0m
  [0m[31mAudio: PipeWire active[0m
  [0m
  [0m[31mRoom: nl_interkom[0m
  [0m[31mDevice ID: ndi-bridge-cam1[0m
  [0m
  [0m[31mRecent logs:[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.376097:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.376803:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.377211:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.676841:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m[31mSep 02 15:17:24 ndi-bridge-cam1 ndi-bridge-intercom-launcher[522900]: [0m
  [0m[31m[522894:522925:0902/151724.677101:ERROR:dbus/bus.cc:408] Failed to connect to [0m
  [0m[31mthe bus: Could not parse server address: Unknown address type (examples of valid[0m
  [0m[31mtypes are "tcp" and on UNIX "unix")[0m
  [0m)
FAILED tests/component/intercom/test_intercom_core.py::TestIntercomCore::test_intercom_control_get_status - AssertionError: Should have mic_volume
assert in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mmic_volume[0m
  [0m[31m{[0m
  [0m[31m    'input': {[0m
  [0m[31m        'device': [0m
  [0m[31m'alsa_input.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.mono-fallback',[0m
  [0m[31m        'muted': True,[0m
  [0m[31m        'volume': 100,[0m
  [0m[31m    },[0m
  [0m[31m    'output': {[0m
  [0m[31m        'device': [0m
  [0m[31m'alsa_output.usb-CSCTEK_USB_Audio_and_HID_A34004801402-00.analog-stereo',[0m
  [0m[31m        'muted': False,[0m
  [0m[31m        'volume': 100,[0m
  [0m[31m    },[0m
  [0m[31m}[0m
  [0m
FAILED tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_complete_audio_workflow - assert == failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32m50[0m
  [0m[31m40[0m
  [0m
FAILED tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_monitor_workflow - assert in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mdisabled[0m
  [0m[31m{[0m
  [0m[31m    "enabled": false,[0m
  [0m[31m    "volume": 0,[0m
  [0m[31m    "module_id": "",[0m
  [0m[31m    "latency_ms": ""[0m
  [0m[31m}[0m
  [0m
FAILED tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_configuration_persistence_workflow - assert == failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32m100[0m
  [0m[31m55[0m
  [0m
FAILED tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_vnc_remote_access - assert (in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32msucceeded[0m
  [0m[31mbash: line 1: nc: command not found[0m
  [0m or in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mconnected[0m
  [0m[31mbash: line 1: nc: command not found[0m
  [0m)
FAILED tests/component/intercom/test_intercom_integration.py::TestIntercomIntegration::test_vdo_ninja_connection - AssertionError: Chrome should be running
assert False
 +  where False = CommandResult(backend=<testinfra.backend.ssh.SshBackend object at 0x7a3bc2418a70>, exit_status=1, command=b'ps aux | grep -v grep | grep google-chrome', _stdout=b'', _stderr=b'').succeeded
FAILED tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_cpu_usage_claim - assert (in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mcpu[0m
  [0m[31m#!/bin/bash[0m
  [0m[31m# ndi bridge intercom self-monitoring control[0m
  [0m[31m# manages low-latency mic monitoring through pipewire loopback[0m
  [0m
  [0m[31m# configuration[0m
  [0m[31mmonitor_state_file="/var/run/ndi-bridge/monitor.state"[0m
  [0m[31mmonitor_module_file="/var/run/ndi-bridge/monitor.module"[0m
  [0m[31mdefault_volume=50[0m
  [0m[31mdefault_enabled=false[0m
  [0m
  [0m[31m# ensure runtime directory exists[0m
  [0m[31mmkdir -p /var/run/ndi-bridge[0m
  [0m
  [0m[31m# colors for output[0m
  [0m[31mred='\033[0;31m'[0m
  [0m[31mgreen='\033[0;32m'[0m
  [0m[31myellow='\033[1;33m'[0m
  [0m[31mnc='\033[0m' # no color[0m
  [0m
  [0m[31m# function to get csctek devices[0m
  [0m[31mget_csctek_devices() {[0m
  [0m[31m    # hardcoded for csctek usb audio and hid device[0m
  [0m[31m    usb_sink=$(pactl list sinks short | grep "csctek_usb_audio_and_hid" | grep [0m
  [0m[31m-v monitor | awk '{print $2}' | head -1)[0m
  [0m[31m    usb_source=$(pactl list sources short | grep "csctek_usb_audio_and_hid" | [0m
  [0m[31mgrep -v monitor | awk '{print $2}' | head -1)[0m
  [0m[31m    [0m
  [0m[31m    if [ -z "$usb_sink" ] || [ -z "$usb_source" ]; then[0m
  [0m[31m        echo -e "${red}error: csctek usb audio hid device not found${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    echo "$usb_source $usb_sink"[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to enable monitoring[0m
  [0m[31menable_monitoring() {[0m
  [0m[31m    local volume=${1:-$default_volume}[0m
  [0m[31m    [0m
  [0m[31m    # get devices[0m
  [0m[31m    read -r source sink <<< $(get_csctek_devices)[0m
  [0m[31m    if [ $? -ne 0 ]; then[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # check if already enabled[0m
  [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
  [0m[31m        module_id=$(cat "$monitor_module_file")[0m
  [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
  [0m[31m            echo -e "${yellow}monitoring already enabled${nc}"[0m
  [0m[31m            set_monitor_volume "$volume"[0m
  [0m[31m            return 0[0m
  [0m[31m        fi[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # set pipewire to ultra-low latency mode (32 samples @ 48khz = ~0.67ms)[0m
  [0m[31m    # this is the absolute minimum for stable operation[0m
  [0m[31m    pw-metadata -n settings 0 clock.quantum 32 >/dev/null 2>&1[0m
  [0m[31m    [0m
  [0m[31m    # load loopback module with minimal latency[0m
  [0m[31m    # latency_msec=0 requests lowest possible latency[0m
  [0m[31m    # adjust_time=0 disables dynamic latency adjustment for stability[0m
  [0m[31m    module_id=$(pactl load-module module-loopback \[0m
  [0m[31m        source="$source" \[0m
  [0m[31m        sink="$sink" \[0m
  [0m[31m        latency_msec=0 \[0m
  [0m[31m        adjust_time=0 \[0m
  [0m[31m        source_dont_move=true \[0m
  [0m[31m        sink_dont_move=true \[0m
  [0m[31m        sink_input_properties="media.name='self-monitor' [0m
  [0m[31mapplication.name='ndi-bridge-monitor'")[0m
  [0m[31m    [0m
  [0m[31m    if [ $? -eq 0 ]; then[0m
  [0m[31m        echo "$module_id" > "$monitor_module_file"[0m
  [0m[31m        echo "true" > "$monitor_state_file"[0m
  [0m[31m        echo -e "${green}monitoring enabled${nc} (module: $module_id)"[0m
  [0m[31m        [0m
  [0m[31m        # wait a moment for pipewire to create the sink input[0m
  [0m[31m        sleep 0.5[0m
  [0m[31m        [0m
  [0m[31m        # set initial volume[0m
  [0m[31m        set_monitor_volume "$volume"[0m
  [0m[31m        [0m
  [0m[31m        # report latency[0m
  [0m[31m        latency=$(echo "scale=2; 32 / 48" | bc 2>/dev/null || echo "0.67")[0m
  [0m[31m        echo "target latency: ${latency}ms @ 48khz (ultra-low latency mode)"[0m
  [0m[31m        [0m
  [0m[31m        return 0[0m
  [0m[31m    else[0m
  [0m[31m        echo -e "${red}failed to enable monitoring${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to disable monitoring[0m
  [0m[31mdisable_monitoring() {[0m
  [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
  [0m[31m        echo -e "${yellow}monitoring not enabled${nc}"[0m
  [0m[31m        return 0[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    module_id=$(cat "$monitor_module_file")[0m
  [0m[31m    [0m
  [0m[31m    # unload the module[0m
  [0m[31m    pactl unload-module "$module_id" 2>/dev/null[0m
  [0m[31m    [0m
  [0m[31m    # clean up state files[0m
  [0m[31m    rm -f "$monitor_module_file"[0m
  [0m[31m    echo "false" > "$monitor_state_file"[0m
  [0m[31m    [0m
  [0m[31m    # restore normal quantum for better stability when not monitoring[0m
  [0m[31m    pw-metadata -n settings 0 clock.quantum 1024 >/dev/null 2>&1[0m
  [0m[31m    [0m
  [0m[31m    echo -e "${green}monitoring disabled${nc}"[0m
  [0m[31m    return 0[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to set monitor volume[0m
  [0m[31mset_monitor_volume() {[0m
  [0m[31m    local volume=${1:-50}[0m
  [0m[31m    [0m
  [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
  [0m[31m        echo -e "${red}monitoring not enabled${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # find the sink input created by our loopback module[0m
  [0m[31m    # look for the module id in the owner module field[0m
  [0m[31m    module_id=$(cat "$monitor_module_file")[0m
  [0m[31m    sink_input=$(pactl list sink-inputs | grep -b 3 "owner module: $module_id" |[0m
  [0m[31mgrep "sink input #" | sed 's/sink input #//')[0m
  [0m[31m    [0m
  [0m[31m    if [ -n "$sink_input" ]; then[0m
  [0m[31m        # convert percentage to pulseaudio volume (0-65536)[0m
  [0m[31m        pa_volume=$((volume * 655))[0m
  [0m[31m        pactl set-sink-input-volume "$sink_input" "$pa_volume"[0m
  [0m[31m        echo -e "${green}monitor volume set to ${volume}%${nc}"[0m
  [0m[31m        [0m
  [0m[31m        # save volume to state only if not muting (volume > 0)[0m
  [0m[31m        # this preserves the actual volume when muting/unmuting[0m
  [0m[31m        if [ "$volume" -gt 0 ]; then[0m
  [0m[31m            echo "$volume" > "/var/run/ndi-bridge/monitor.volume"[0m
  [0m[31m        fi[0m
  [0m[31m        return 0[0m
  [0m[31m    else[0m
  [0m[31m        echo -e "${red}monitor sink input not found${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to get monitoring status[0m
  [0m[31mget_status() {[0m
  [0m[31m    local enabled="false"[0m
  [0m[31m    local volume=0[0m
  [0m[31m    local module_id=""[0m
  [0m[31m    local latency=""[0m
  [0m[31m    [0m
  [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
  [0m[31m        module_id=$(cat "$monitor_module_file")[0m
  [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
  [0m[31m            enabled="true"[0m
  [0m[31m            [0m
  [0m[31m            # get volume[0m
  [0m[31m            if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
  [0m[31m                volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
  [0m[31m            fi[0m
  [0m[31m            [0m
  [0m[31m            # calculate latency[0m
  [0m[31m            quantum=$(pw-metadata -n settings 0 clock.quantum 2>/dev/null | grep[0m
  [0m[31m"value:" | cut -d"'" -f2)[0m
  [0m[31m            rate=$(pw-metadata -n settings 0 clock.rate 2>/dev/null | grep [0m
  [0m[31m"value:" | cut -d"'" -f2)[0m
  [0m[31m            if [ -n "$quantum" ] && [ -n "$rate" ]; then[0m
  [0m[31m                latency=$(echo "scale=2; ($quantum * 1000) / $rate" | bc [0m
  [0m[31m2>/dev/null || echo "0.67")[0m
  [0m[31m            fi[0m
  [0m[31m        fi[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # output json status[0m
  [0m[31m    cat <<eof[0m
  [0m[31m{[0m
  [0m[31m    "enabled": $enabled,[0m
  [0m[31m    "volume": $volume,[0m
  [0m[31m    "module_id": "$module_id",[0m
  [0m[31m    "latency_ms": "$latency"[0m
  [0m[31m}[0m
  [0m[31meof[0m
  [0m[31m}[0m
  [0m
  [0m[31m# main command processing[0m
  [0m[31mcase "${1:-status}" in[0m
  [0m[31m    enable)[0m
  [0m[31m        enable_monitoring "${2:-$default_volume}"[0m
  [0m[31m        ;;[0m
  [0m[31m    disable)[0m
  [0m[31m        disable_monitoring[0m
  [0m[31m        ;;[0m
  [0m[31m    volume)[0m
  [0m[31m        if [ -z "$2" ]; then[0m
  [0m[31m            echo "usage: $0 volume <0-100>"[0m
  [0m[31m            exit 1[0m
  [0m[31m        fi[0m
  [0m[31m        set_monitor_volume "$2"[0m
  [0m[31m        ;;[0m
  [0m[31m    status)[0m
  [0m[31m        get_status[0m
  [0m[31m        ;;[0m
  [0m[31m    restart)[0m
  [0m[31m        # get current volume if enabled[0m
  [0m[31m        volume=$default_volume[0m
  [0m[31m        if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
  [0m[31m            volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
  [0m[31m        fi[0m
  [0m[31m        [0m
  [0m[31m        disable_monitoring >/dev/null 2>&1[0m
  [0m[31m        sleep 1[0m
  [0m[31m        enable_monitoring "$volume"[0m
  [0m[31m        ;;[0m
  [0m[31m    *)[0m
  [0m[31m        echo "ndi bridge intercom self-monitoring control"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "usage: $0 {enable|disable|volume|status|restart} [options]"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "commands:"[0m
  [0m[31m        echo "  enable [volume]  - enable monitoring (volume: 0-100, default: [0m
  [0m[31m50)"[0m
  [0m[31m        echo "  disable          - disable monitoring"[0m
  [0m[31m        echo "  volume <0-100>   - set monitor volume"[0m
  [0m[31m        echo "  status           - show current status (json)"[0m
  [0m[31m        echo "  restart          - restart monitoring with current settings"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "examples:"[0m
  [0m[31m        echo "  $0 enable        - enable with default 50% volume"[0m
  [0m[31m        echo "  $0 enable 30     - enable with 30% volume"[0m
  [0m[31m        echo "  $0 volume 75     - set volume to 75%"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "note: monitoring provides ~0.67ms latency at 48khz (32-sample [0m
  [0m[31mquantum)"[0m
  [0m[31m        echo "      this is the lowest achievable latency without hardware [0m
  [0m[31mmonitoring"[0m
  [0m[31m        exit 1[0m
  [0m[31m        ;;[0m
  [0m[31mesac[0m
  [0m or in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mefficient[0m
  [0m[31m#!/bin/bash[0m
  [0m[31m# ndi bridge intercom self-monitoring control[0m
  [0m[31m# manages low-latency mic monitoring through pipewire loopback[0m
  [0m
  [0m[31m# configuration[0m
  [0m[31mmonitor_state_file="/var/run/ndi-bridge/monitor.state"[0m
  [0m[31mmonitor_module_file="/var/run/ndi-bridge/monitor.module"[0m
  [0m[31mdefault_volume=50[0m
  [0m[31mdefault_enabled=false[0m
  [0m
  [0m[31m# ensure runtime directory exists[0m
  [0m[31mmkdir -p /var/run/ndi-bridge[0m
  [0m
  [0m[31m# colors for output[0m
  [0m[31mred='\033[0;31m'[0m
  [0m[31mgreen='\033[0;32m'[0m
  [0m[31myellow='\033[1;33m'[0m
  [0m[31mnc='\033[0m' # no color[0m
  [0m
  [0m[31m# function to get csctek devices[0m
  [0m[31mget_csctek_devices() {[0m
  [0m[31m    # hardcoded for csctek usb audio and hid device[0m
  [0m[31m    usb_sink=$(pactl list sinks short | grep "csctek_usb_audio_and_hid" | grep [0m
  [0m[31m-v monitor | awk '{print $2}' | head -1)[0m
  [0m[31m    usb_source=$(pactl list sources short | grep "csctek_usb_audio_and_hid" | [0m
  [0m[31mgrep -v monitor | awk '{print $2}' | head -1)[0m
  [0m[31m    [0m
  [0m[31m    if [ -z "$usb_sink" ] || [ -z "$usb_source" ]; then[0m
  [0m[31m        echo -e "${red}error: csctek usb audio hid device not found${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    echo "$usb_source $usb_sink"[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to enable monitoring[0m
  [0m[31menable_monitoring() {[0m
  [0m[31m    local volume=${1:-$default_volume}[0m
  [0m[31m    [0m
  [0m[31m    # get devices[0m
  [0m[31m    read -r source sink <<< $(get_csctek_devices)[0m
  [0m[31m    if [ $? -ne 0 ]; then[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # check if already enabled[0m
  [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
  [0m[31m        module_id=$(cat "$monitor_module_file")[0m
  [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
  [0m[31m            echo -e "${yellow}monitoring already enabled${nc}"[0m
  [0m[31m            set_monitor_volume "$volume"[0m
  [0m[31m            return 0[0m
  [0m[31m        fi[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # set pipewire to ultra-low latency mode (32 samples @ 48khz = ~0.67ms)[0m
  [0m[31m    # this is the absolute minimum for stable operation[0m
  [0m[31m    pw-metadata -n settings 0 clock.quantum 32 >/dev/null 2>&1[0m
  [0m[31m    [0m
  [0m[31m    # load loopback module with minimal latency[0m
  [0m[31m    # latency_msec=0 requests lowest possible latency[0m
  [0m[31m    # adjust_time=0 disables dynamic latency adjustment for stability[0m
  [0m[31m    module_id=$(pactl load-module module-loopback \[0m
  [0m[31m        source="$source" \[0m
  [0m[31m        sink="$sink" \[0m
  [0m[31m        latency_msec=0 \[0m
  [0m[31m        adjust_time=0 \[0m
  [0m[31m        source_dont_move=true \[0m
  [0m[31m        sink_dont_move=true \[0m
  [0m[31m        sink_input_properties="media.name='self-monitor' [0m
  [0m[31mapplication.name='ndi-bridge-monitor'")[0m
  [0m[31m    [0m
  [0m[31m    if [ $? -eq 0 ]; then[0m
  [0m[31m        echo "$module_id" > "$monitor_module_file"[0m
  [0m[31m        echo "true" > "$monitor_state_file"[0m
  [0m[31m        echo -e "${green}monitoring enabled${nc} (module: $module_id)"[0m
  [0m[31m        [0m
  [0m[31m        # wait a moment for pipewire to create the sink input[0m
  [0m[31m        sleep 0.5[0m
  [0m[31m        [0m
  [0m[31m        # set initial volume[0m
  [0m[31m        set_monitor_volume "$volume"[0m
  [0m[31m        [0m
  [0m[31m        # report latency[0m
  [0m[31m        latency=$(echo "scale=2; 32 / 48" | bc 2>/dev/null || echo "0.67")[0m
  [0m[31m        echo "target latency: ${latency}ms @ 48khz (ultra-low latency mode)"[0m
  [0m[31m        [0m
  [0m[31m        return 0[0m
  [0m[31m    else[0m
  [0m[31m        echo -e "${red}failed to enable monitoring${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to disable monitoring[0m
  [0m[31mdisable_monitoring() {[0m
  [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
  [0m[31m        echo -e "${yellow}monitoring not enabled${nc}"[0m
  [0m[31m        return 0[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    module_id=$(cat "$monitor_module_file")[0m
  [0m[31m    [0m
  [0m[31m    # unload the module[0m
  [0m[31m    pactl unload-module "$module_id" 2>/dev/null[0m
  [0m[31m    [0m
  [0m[31m    # clean up state files[0m
  [0m[31m    rm -f "$monitor_module_file"[0m
  [0m[31m    echo "false" > "$monitor_state_file"[0m
  [0m[31m    [0m
  [0m[31m    # restore normal quantum for better stability when not monitoring[0m
  [0m[31m    pw-metadata -n settings 0 clock.quantum 1024 >/dev/null 2>&1[0m
  [0m[31m    [0m
  [0m[31m    echo -e "${green}monitoring disabled${nc}"[0m
  [0m[31m    return 0[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to set monitor volume[0m
  [0m[31mset_monitor_volume() {[0m
  [0m[31m    local volume=${1:-50}[0m
  [0m[31m    [0m
  [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
  [0m[31m        echo -e "${red}monitoring not enabled${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # find the sink input created by our loopback module[0m
  [0m[31m    # look for the module id in the owner module field[0m
  [0m[31m    module_id=$(cat "$monitor_module_file")[0m
  [0m[31m    sink_input=$(pactl list sink-inputs | grep -b 3 "owner module: $module_id" |[0m
  [0m[31mgrep "sink input #" | sed 's/sink input #//')[0m
  [0m[31m    [0m
  [0m[31m    if [ -n "$sink_input" ]; then[0m
  [0m[31m        # convert percentage to pulseaudio volume (0-65536)[0m
  [0m[31m        pa_volume=$((volume * 655))[0m
  [0m[31m        pactl set-sink-input-volume "$sink_input" "$pa_volume"[0m
  [0m[31m        echo -e "${green}monitor volume set to ${volume}%${nc}"[0m
  [0m[31m        [0m
  [0m[31m        # save volume to state only if not muting (volume > 0)[0m
  [0m[31m        # this preserves the actual volume when muting/unmuting[0m
  [0m[31m        if [ "$volume" -gt 0 ]; then[0m
  [0m[31m            echo "$volume" > "/var/run/ndi-bridge/monitor.volume"[0m
  [0m[31m        fi[0m
  [0m[31m        return 0[0m
  [0m[31m    else[0m
  [0m[31m        echo -e "${red}monitor sink input not found${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to get monitoring status[0m
  [0m[31mget_status() {[0m
  [0m[31m    local enabled="false"[0m
  [0m[31m    local volume=0[0m
  [0m[31m    local module_id=""[0m
  [0m[31m    local latency=""[0m
  [0m[31m    [0m
  [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
  [0m[31m        module_id=$(cat "$monitor_module_file")[0m
  [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
  [0m[31m            enabled="true"[0m
  [0m[31m            [0m
  [0m[31m            # get volume[0m
  [0m[31m            if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
  [0m[31m                volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
  [0m[31m            fi[0m
  [0m[31m            [0m
  [0m[31m            # calculate latency[0m
  [0m[31m            quantum=$(pw-metadata -n settings 0 clock.quantum 2>/dev/null | grep[0m
  [0m[31m"value:" | cut -d"'" -f2)[0m
  [0m[31m            rate=$(pw-metadata -n settings 0 clock.rate 2>/dev/null | grep [0m
  [0m[31m"value:" | cut -d"'" -f2)[0m
  [0m[31m            if [ -n "$quantum" ] && [ -n "$rate" ]; then[0m
  [0m[31m                latency=$(echo "scale=2; ($quantum * 1000) / $rate" | bc [0m
  [0m[31m2>/dev/null || echo "0.67")[0m
  [0m[31m            fi[0m
  [0m[31m        fi[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # output json status[0m
  [0m[31m    cat <<eof[0m
  [0m[31m{[0m
  [0m[31m    "enabled": $enabled,[0m
  [0m[31m    "volume": $volume,[0m
  [0m[31m    "module_id": "$module_id",[0m
  [0m[31m    "latency_ms": "$latency"[0m
  [0m[31m}[0m
  [0m[31meof[0m
  [0m[31m}[0m
  [0m
  [0m[31m# main command processing[0m
  [0m[31mcase "${1:-status}" in[0m
  [0m[31m    enable)[0m
  [0m[31m        enable_monitoring "${2:-$default_volume}"[0m
  [0m[31m        ;;[0m
  [0m[31m    disable)[0m
  [0m[31m        disable_monitoring[0m
  [0m[31m        ;;[0m
  [0m[31m    volume)[0m
  [0m[31m        if [ -z "$2" ]; then[0m
  [0m[31m            echo "usage: $0 volume <0-100>"[0m
  [0m[31m            exit 1[0m
  [0m[31m        fi[0m
  [0m[31m        set_monitor_volume "$2"[0m
  [0m[31m        ;;[0m
  [0m[31m    status)[0m
  [0m[31m        get_status[0m
  [0m[31m        ;;[0m
  [0m[31m    restart)[0m
  [0m[31m        # get current volume if enabled[0m
  [0m[31m        volume=$default_volume[0m
  [0m[31m        if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
  [0m[31m            volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
  [0m[31m        fi[0m
  [0m[31m        [0m
  [0m[31m        disable_monitoring >/dev/null 2>&1[0m
  [0m[31m        sleep 1[0m
  [0m[31m        enable_monitoring "$volume"[0m
  [0m[31m        ;;[0m
  [0m[31m    *)[0m
  [0m[31m        echo "ndi bridge intercom self-monitoring control"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "usage: $0 {enable|disable|volume|status|restart} [options]"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "commands:"[0m
  [0m[31m        echo "  enable [volume]  - enable monitoring (volume: 0-100, default: [0m
  [0m[31m50)"[0m
  [0m[31m        echo "  disable          - disable monitoring"[0m
  [0m[31m        echo "  volume <0-100>   - set monitor volume"[0m
  [0m[31m        echo "  status           - show current status (json)"[0m
  [0m[31m        echo "  restart          - restart monitoring with current settings"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "examples:"[0m
  [0m[31m        echo "  $0 enable        - enable with default 50% volume"[0m
  [0m[31m        echo "  $0 enable 30     - enable with 30% volume"[0m
  [0m[31m        echo "  $0 volume 75     - set volume to 75%"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "note: monitoring provides ~0.67ms latency at 48khz (32-sample [0m
  [0m[31mquantum)"[0m
  [0m[31m        echo "      this is the lowest achievable latency without hardware [0m
  [0m[31mmonitoring"[0m
  [0m[31m        exit 1[0m
  [0m[31m        ;;[0m
  [0m[31mesac[0m
  [0m or in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mperformance[0m
  [0m[31m#!/bin/bash[0m
  [0m[31m# ndi bridge intercom self-monitoring control[0m
  [0m[31m# manages low-latency mic monitoring through pipewire loopback[0m
  [0m
  [0m[31m# configuration[0m
  [0m[31mmonitor_state_file="/var/run/ndi-bridge/monitor.state"[0m
  [0m[31mmonitor_module_file="/var/run/ndi-bridge/monitor.module"[0m
  [0m[31mdefault_volume=50[0m
  [0m[31mdefault_enabled=false[0m
  [0m
  [0m[31m# ensure runtime directory exists[0m
  [0m[31mmkdir -p /var/run/ndi-bridge[0m
  [0m
  [0m[31m# colors for output[0m
  [0m[31mred='\033[0;31m'[0m
  [0m[31mgreen='\033[0;32m'[0m
  [0m[31myellow='\033[1;33m'[0m
  [0m[31mnc='\033[0m' # no color[0m
  [0m
  [0m[31m# function to get csctek devices[0m
  [0m[31mget_csctek_devices() {[0m
  [0m[31m    # hardcoded for csctek usb audio and hid device[0m
  [0m[31m    usb_sink=$(pactl list sinks short | grep "csctek_usb_audio_and_hid" | grep [0m
  [0m[31m-v monitor | awk '{print $2}' | head -1)[0m
  [0m[31m    usb_source=$(pactl list sources short | grep "csctek_usb_audio_and_hid" | [0m
  [0m[31mgrep -v monitor | awk '{print $2}' | head -1)[0m
  [0m[31m    [0m
  [0m[31m    if [ -z "$usb_sink" ] || [ -z "$usb_source" ]; then[0m
  [0m[31m        echo -e "${red}error: csctek usb audio hid device not found${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    echo "$usb_source $usb_sink"[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to enable monitoring[0m
  [0m[31menable_monitoring() {[0m
  [0m[31m    local volume=${1:-$default_volume}[0m
  [0m[31m    [0m
  [0m[31m    # get devices[0m
  [0m[31m    read -r source sink <<< $(get_csctek_devices)[0m
  [0m[31m    if [ $? -ne 0 ]; then[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # check if already enabled[0m
  [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
  [0m[31m        module_id=$(cat "$monitor_module_file")[0m
  [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
  [0m[31m            echo -e "${yellow}monitoring already enabled${nc}"[0m
  [0m[31m            set_monitor_volume "$volume"[0m
  [0m[31m            return 0[0m
  [0m[31m        fi[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # set pipewire to ultra-low latency mode (32 samples @ 48khz = ~0.67ms)[0m
  [0m[31m    # this is the absolute minimum for stable operation[0m
  [0m[31m    pw-metadata -n settings 0 clock.quantum 32 >/dev/null 2>&1[0m
  [0m[31m    [0m
  [0m[31m    # load loopback module with minimal latency[0m
  [0m[31m    # latency_msec=0 requests lowest possible latency[0m
  [0m[31m    # adjust_time=0 disables dynamic latency adjustment for stability[0m
  [0m[31m    module_id=$(pactl load-module module-loopback \[0m
  [0m[31m        source="$source" \[0m
  [0m[31m        sink="$sink" \[0m
  [0m[31m        latency_msec=0 \[0m
  [0m[31m        adjust_time=0 \[0m
  [0m[31m        source_dont_move=true \[0m
  [0m[31m        sink_dont_move=true \[0m
  [0m[31m        sink_input_properties="media.name='self-monitor' [0m
  [0m[31mapplication.name='ndi-bridge-monitor'")[0m
  [0m[31m    [0m
  [0m[31m    if [ $? -eq 0 ]; then[0m
  [0m[31m        echo "$module_id" > "$monitor_module_file"[0m
  [0m[31m        echo "true" > "$monitor_state_file"[0m
  [0m[31m        echo -e "${green}monitoring enabled${nc} (module: $module_id)"[0m
  [0m[31m        [0m
  [0m[31m        # wait a moment for pipewire to create the sink input[0m
  [0m[31m        sleep 0.5[0m
  [0m[31m        [0m
  [0m[31m        # set initial volume[0m
  [0m[31m        set_monitor_volume "$volume"[0m
  [0m[31m        [0m
  [0m[31m        # report latency[0m
  [0m[31m        latency=$(echo "scale=2; 32 / 48" | bc 2>/dev/null || echo "0.67")[0m
  [0m[31m        echo "target latency: ${latency}ms @ 48khz (ultra-low latency mode)"[0m
  [0m[31m        [0m
  [0m[31m        return 0[0m
  [0m[31m    else[0m
  [0m[31m        echo -e "${red}failed to enable monitoring${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to disable monitoring[0m
  [0m[31mdisable_monitoring() {[0m
  [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
  [0m[31m        echo -e "${yellow}monitoring not enabled${nc}"[0m
  [0m[31m        return 0[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    module_id=$(cat "$monitor_module_file")[0m
  [0m[31m    [0m
  [0m[31m    # unload the module[0m
  [0m[31m    pactl unload-module "$module_id" 2>/dev/null[0m
  [0m[31m    [0m
  [0m[31m    # clean up state files[0m
  [0m[31m    rm -f "$monitor_module_file"[0m
  [0m[31m    echo "false" > "$monitor_state_file"[0m
  [0m[31m    [0m
  [0m[31m    # restore normal quantum for better stability when not monitoring[0m
  [0m[31m    pw-metadata -n settings 0 clock.quantum 1024 >/dev/null 2>&1[0m
  [0m[31m    [0m
  [0m[31m    echo -e "${green}monitoring disabled${nc}"[0m
  [0m[31m    return 0[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to set monitor volume[0m
  [0m[31mset_monitor_volume() {[0m
  [0m[31m    local volume=${1:-50}[0m
  [0m[31m    [0m
  [0m[31m    if [ ! -f "$monitor_module_file" ]; then[0m
  [0m[31m        echo -e "${red}monitoring not enabled${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # find the sink input created by our loopback module[0m
  [0m[31m    # look for the module id in the owner module field[0m
  [0m[31m    module_id=$(cat "$monitor_module_file")[0m
  [0m[31m    sink_input=$(pactl list sink-inputs | grep -b 3 "owner module: $module_id" |[0m
  [0m[31mgrep "sink input #" | sed 's/sink input #//')[0m
  [0m[31m    [0m
  [0m[31m    if [ -n "$sink_input" ]; then[0m
  [0m[31m        # convert percentage to pulseaudio volume (0-65536)[0m
  [0m[31m        pa_volume=$((volume * 655))[0m
  [0m[31m        pactl set-sink-input-volume "$sink_input" "$pa_volume"[0m
  [0m[31m        echo -e "${green}monitor volume set to ${volume}%${nc}"[0m
  [0m[31m        [0m
  [0m[31m        # save volume to state only if not muting (volume > 0)[0m
  [0m[31m        # this preserves the actual volume when muting/unmuting[0m
  [0m[31m        if [ "$volume" -gt 0 ]; then[0m
  [0m[31m            echo "$volume" > "/var/run/ndi-bridge/monitor.volume"[0m
  [0m[31m        fi[0m
  [0m[31m        return 0[0m
  [0m[31m    else[0m
  [0m[31m        echo -e "${red}monitor sink input not found${nc}" >&2[0m
  [0m[31m        return 1[0m
  [0m[31m    fi[0m
  [0m[31m}[0m
  [0m
  [0m[31m# function to get monitoring status[0m
  [0m[31mget_status() {[0m
  [0m[31m    local enabled="false"[0m
  [0m[31m    local volume=0[0m
  [0m[31m    local module_id=""[0m
  [0m[31m    local latency=""[0m
  [0m[31m    [0m
  [0m[31m    if [ -f "$monitor_module_file" ]; then[0m
  [0m[31m        module_id=$(cat "$monitor_module_file")[0m
  [0m[31m        if pactl list modules short | grep -q "^$module_id"; then[0m
  [0m[31m            enabled="true"[0m
  [0m[31m            [0m
  [0m[31m            # get volume[0m
  [0m[31m            if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
  [0m[31m                volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
  [0m[31m            fi[0m
  [0m[31m            [0m
  [0m[31m            # calculate latency[0m
  [0m[31m            quantum=$(pw-metadata -n settings 0 clock.quantum 2>/dev/null | grep[0m
  [0m[31m"value:" | cut -d"'" -f2)[0m
  [0m[31m            rate=$(pw-metadata -n settings 0 clock.rate 2>/dev/null | grep [0m
  [0m[31m"value:" | cut -d"'" -f2)[0m
  [0m[31m            if [ -n "$quantum" ] && [ -n "$rate" ]; then[0m
  [0m[31m                latency=$(echo "scale=2; ($quantum * 1000) / $rate" | bc [0m
  [0m[31m2>/dev/null || echo "0.67")[0m
  [0m[31m            fi[0m
  [0m[31m        fi[0m
  [0m[31m    fi[0m
  [0m[31m    [0m
  [0m[31m    # output json status[0m
  [0m[31m    cat <<eof[0m
  [0m[31m{[0m
  [0m[31m    "enabled": $enabled,[0m
  [0m[31m    "volume": $volume,[0m
  [0m[31m    "module_id": "$module_id",[0m
  [0m[31m    "latency_ms": "$latency"[0m
  [0m[31m}[0m
  [0m[31meof[0m
  [0m[31m}[0m
  [0m
  [0m[31m# main command processing[0m
  [0m[31mcase "${1:-status}" in[0m
  [0m[31m    enable)[0m
  [0m[31m        enable_monitoring "${2:-$default_volume}"[0m
  [0m[31m        ;;[0m
  [0m[31m    disable)[0m
  [0m[31m        disable_monitoring[0m
  [0m[31m        ;;[0m
  [0m[31m    volume)[0m
  [0m[31m        if [ -z "$2" ]; then[0m
  [0m[31m            echo "usage: $0 volume <0-100>"[0m
  [0m[31m            exit 1[0m
  [0m[31m        fi[0m
  [0m[31m        set_monitor_volume "$2"[0m
  [0m[31m        ;;[0m
  [0m[31m    status)[0m
  [0m[31m        get_status[0m
  [0m[31m        ;;[0m
  [0m[31m    restart)[0m
  [0m[31m        # get current volume if enabled[0m
  [0m[31m        volume=$default_volume[0m
  [0m[31m        if [ -f "/var/run/ndi-bridge/monitor.volume" ]; then[0m
  [0m[31m            volume=$(cat "/var/run/ndi-bridge/monitor.volume")[0m
  [0m[31m        fi[0m
  [0m[31m        [0m
  [0m[31m        disable_monitoring >/dev/null 2>&1[0m
  [0m[31m        sleep 1[0m
  [0m[31m        enable_monitoring "$volume"[0m
  [0m[31m        ;;[0m
  [0m[31m    *)[0m
  [0m[31m        echo "ndi bridge intercom self-monitoring control"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "usage: $0 {enable|disable|volume|status|restart} [options]"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "commands:"[0m
  [0m[31m        echo "  enable [volume]  - enable monitoring (volume: 0-100, default: [0m
  [0m[31m50)"[0m
  [0m[31m        echo "  disable          - disable monitoring"[0m
  [0m[31m        echo "  volume <0-100>   - set monitor volume"[0m
  [0m[31m        echo "  status           - show current status (json)"[0m
  [0m[31m        echo "  restart          - restart monitoring with current settings"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "examples:"[0m
  [0m[31m        echo "  $0 enable        - enable with default 50% volume"[0m
  [0m[31m        echo "  $0 enable 30     - enable with 30% volume"[0m
  [0m[31m        echo "  $0 volume 75     - set volume to 75%"[0m
  [0m[31m        echo ""[0m
  [0m[31m        echo "note: monitoring provides ~0.67ms latency at 48khz (32-sample [0m
  [0m[31mquantum)"[0m
  [0m[31m        echo "      this is the lowest achievable latency without hardware [0m
  [0m[31mmonitoring"[0m
  [0m[31m        exit 1[0m
  [0m[31m        ;;[0m
  [0m[31mesac[0m
  [0m)
FAILED tests/component/intercom/test_intercom_monitor_latency.py::TestIntercomMonitorLatency::test_monitor_enable_disable_cycle - AssertionError: Should be disabled in cycle 0
assert in failed. [pytest-clarity diff shown]
  [0m
  [0m[32mLHS[0m vs [31mRHS[0m shown below
  [0m
  [0m[32mdisabled[0m
  [0m[31m{[0m
  [0m[31m    "enabled": false,[0m
  [0m[31m    "volume": 0,[0m
  [0m[31m    "module_id": "",[0m
  [0m[31m    "latency_ms": ""[0m
  [0m[31m}[0m
  [0m
FAILED tests/component/intercom/test_intercom_processes.py::TestIntercomProcesses::test_process_resource_usage - IndexError: list index out of range
FAILED tests/component/intercom/test_intercom_web.py::TestIntercomWeb::test_web_backend_files_exist - AssertionError: /opt/ndi-bridge/web/backend/main.py should exist
assert False
 +  where False = <file /usr/local/share/ndi-bridge/web/backend/main.py>.exists
============= 13 failed, 76 passed, 3 skipped in 245.96s (0:04:05) =============
